z0 <- mc_id(dados)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados)
summary(fit.binom)
library(mcglm)
library(Matrix)
source('~/msc/3_manova_mcglm/2_funcoes/functions2.R')
# lendo os dados
dados <- readRDS('processos_parc.rds')
dados <- dados[, -c(2, 7)]
# ----------------------------------------------------------------------
# Ajustando o modelo
library(mcglm)
library(Matrix)
# preditores lineares considerando todas as covariaveis
imp <- improcedente ~ foro + tipo_vara  + adv_reu + empresa +
tipo_dano + log10(valor_acao) + serasa + terceiro + consumo +
gratuidade
proc <- procedente ~ foro + tipo_vara  + adv_reu + empresa +
tipo_dano + log10(valor_acao) + serasa + terceiro + consumo +
gratuidade
# a list of known matrices to be used on the matrix linear predictor
z0 <- mc_id(dados)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados)
summary(fit.binom)
manova_binom <- manova.mcglm(fit.binom)
mc_anova_pc <- anova(fit.binom)
i = 1
mc_anova_pc[[i]]
mc_anova_III(fit.binom)[[i]]
mc_anova_II(fit.binom)[[i]]
mc_anova_II(fit.binom)[[i]] == mc_anova_III(fit.binom)[[i]]
mc_anova_I(fit.binom)[[i]]
mc_anova_disp(fit.binom)
coef(fit.binom, type = 'tau')
mc_anova_power(fit.binom)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados,
power_fixed = c(F,F))
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados,
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01)
power_fixed = c(F,F))
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados,
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F,F))
mc_anova_pc <- anova(fit.binom)
i = 1
mc_anova_pc[[i]]
mc_anova_III(fit.binom)[[i]]
mc_anova_II(fit.binom)[[i]]
mc_anova_I(fit.binom)[[i]]
coef(fit.binom, type = 'power')
mc_anova_power(fit.binom)
mc_manova(fit.binom)
mc_manova(fit.binom)
mc_manova_III(fit.binom)
mc_manova_II(fit.binom) == mc_manova_III(fit.binom)
mc_manova_I(fit.binom)
mc_manova_disp(fit.binom)
mc_manova_power(fit.binom)
# preditores lineares considerando todas as covariaveis
imp <- improcedente ~ (foro + tipo_vara  + adv_reu + empresa +
tipo_dano + log10(valor_acao) + serasa + terceiro + consumo +
gratuidade)^2
proc <- procedente ~ (foro + tipo_vara  + adv_reu + empresa +
tipo_dano + log10(valor_acao) + serasa + terceiro + consumo +
gratuidade)^2
# a list of known matrices to be used on the matrix linear predictor
z0 <- mc_id(dados)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados,
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F,F))
# preditores lineares considerando todas as covariaveis
imp <- improcedente ~ (log10(valor_acao) + serasa + terceiro + consumo +
gratuidade)^2
proc <- procedente ~ (log10(valor_acao) + serasa + terceiro + consumo +
gratuidade)^2
# a list of known matrices to be used on the matrix linear predictor
z0 <- mc_id(dados)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados,
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F,F))
summary(fit.binom)
mc_anova_pc <- anova(fit.binom)
i = 1
mc_anova_pc[[i]]
mc_anova_III(fit.binom)[[i]]
mc_anova_II(fit.binom)[[i]]
coef(fit.binom, type = 'tau')
mc_anova_disp(fit.binom)
coef(fit.binom, type = 'power')
mc_anova_power(fit.binom)
mc_manova(fit.binom)
mc_manova(fit.binom)
mc_manova_III(fit.binom)
mc_manova_II(fit.binom)
mc_manova_I(fit.binom)
mc_manova_disp(fit.binom)
mc_manova_power(fit.binom)
# preditores lineares considerando todas as covariaveis
imp <- improcedente ~ (foro + tipo_vara  + adv_reu + empresa +
tipo_dano)^2
proc <- procedente ~ (foro + tipo_vara  + adv_reu + empresa +
tipo_dano)^2
# a list of known matrices to be used on the matrix linear predictor
z0 <- mc_id(dados)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados,
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F,F))
# preditores lineares considerando todas as covariaveis
imp <- improcedente ~ (foro + tipo_vara  + adv_reu + empresa)^2
proc <- procedente ~ (foro + tipo_vara  + adv_reu + empresa)^2
# a list of known matrices to be used on the matrix linear predictor
z0 <- mc_id(dados)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados,
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F,F))
# preditores lineares considerando todas as covariaveis
imp <- improcedente ~ (foro + tipo_vara  + adv_reu)^2
proc <- procedente ~ (foro + tipo_vara  + adv_reu)^2
# a list of known matrices to be used on the matrix linear predictor
z0 <- mc_id(dados)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados,
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F,F))
# preditores lineares considerando todas as covariaveis
imp <- improcedente ~ (foro + tipo_vara)^2
proc <- procedente ~ (foro + tipo_vara)^2
# a list of known matrices to be used on the matrix linear predictor
z0 <- mc_id(dados)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados,
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F,F))
# preditores lineares considerando todas as covariaveis
imp <- improcedente ~ (foro + tipo_vara + log10(valor_acao))^2
proc <- procedente ~ (foro + tipo_vara + log10(valor_acao))^2
# a list of known matrices to be used on the matrix linear predictor
z0 <- mc_id(dados)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados,
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F,F))
fit.binom
# preditores lineares considerando todas as covariaveis
imp <- improcedente ~ (foro + tipo_vara  + adv_reu + empresa +
tipo_dano + log10(valor_acao) + serasa + terceiro + consumo +
gratuidade)^2
proc <- procedente ~ (foro + tipo_vara  + adv_reu + empresa +
tipo_dano + log10(valor_acao) + serasa + terceiro + consumo +
gratuidade)
# a list of known matrices to be used on the matrix linear predictor
z0 <- mc_id(dados)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados,
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F,F))
# preditores lineares considerando todas as covariaveis
imp <- improcedente ~ (log10(valor_acao) + serasa + terceiro + consumo +
gratuidade)
proc <- procedente ~ (foro + tipo_vara  + adv_reu + empresa +
tipo_dano)
# a list of known matrices to be used on the matrix linear predictor
z0 <- mc_id(dados)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados,
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F,F))
summary(fit.binom)
mc_anova_pc <- anova(fit.binom)
mc_anova_I(fit.binom)
i = 1
mc_anova_pc[[i]]
mc_anova_III(fit.binom)[[i]]
i = 2
mc_anova_pc[[i]]
mc_anova_III(fit.binom)[[i]]
mc_anova_II(fit.binom)[[i]]
mc_anova_I(fit.binom)[[i]]
coef(fit.binom, type = 'tau')
mc_anova_disp(fit.binom)
coef(fit.binom, type = 'power')
mc_anova_power(fit.binom)
mc_manova(fit.binom)
mc_manova_I(fit.binom)
mc_manova_II(fit.binom)
mc_manova_III(fit.binom)
mc_manova_disp(fit.binom)
mc_manova_power(fit.binom)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, c(z0, zo)),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados,
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F,F))
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, c(z0, z0)),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados,
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F,F))
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, c(z0)),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados,
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F,F))
library(mcglm)
library(Matrix)
source('~/msc/3_manova_mcglm/2_funcoes/functions2.R')
dados <- read.csv2("NBA.csv",
header = T,
sep = ";",
dec = ',')
dados$X6 <- sample(as.factor(rep(c('nivel_1', 'nivel_2',
'nivel_3', 'nivel_4',
'nivel_5', 'nivel_6'), 9)))
names(dados) <- c('x1', 'x2', 'y1', 'y2', 'y3', 'x3')
summary(dados)
disp <- function(form, data){
plot(form, data)
abline(lm(form, data), col = 2, lwd = 2)
}
x11()
par(mfrow = c(3,3))
disp(y1~x1, dados)
disp(y1~x2, dados)
plot(y1~x3, dados)
x11()
par(mfrow = c(3,3))
disp(y1~x1, dados)
disp(y1~x2, dados)
plot(y1~x3, dados)
disp(y2~x1, dados)
disp(y2~x2, dados)
plot(y2~x3, dados)
disp(y3~x1, dados)
disp(y3~x2, dados)
plot(y3~x3, dados)
cor1 <- cor(dados[,-ncol(dados)])
par(mfrow = c(1,1))
corrplot::corrplot.mixed(cor1,
lower = 'number',
upper = 'ellipse')
form1 <- y1 ~ x1+x2+x3
form2 <- y2 ~ x1+x2+x3
form3 <- y3 ~ x1+x2+x3
Z0 <- mc_id(dados) # Identidade
fit <-
mcglm(linear_pred = c(form1,
form2,
form3),
matrix_pred = list(c(Z0),
c(Z0),
c(Z0)),
link = c("identity","identity","identity"),
variance = c("tweedie",
"tweedie",
"tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
data = dados)
fit$beta_names[[1]]
summary(fit)
mc_anova_pc <- anova(fit)
i = 1
mc_anova_pc[[i]]
mc_anova_I(fit)[[i]]
mc_anova_II(fit)[[i]]
mc_anova_III(fit)[[i]]
form1 <- y1 ~ x1
form2 <- y2 ~ x1+x2
form3 <- y3 ~ x1+x2+x3
Z0 <- mc_id(dados) # Identidade
fit <-
mcglm(linear_pred = c(form1,
form2,
form3),
matrix_pred = list(c(Z0),
c(Z0),
c(Z0)),
link = c("identity","identity","identity"),
variance = c("tweedie",
"tweedie",
"tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
data = dados)
fit$beta_names[[1]]
fit$beta_names
summary(fit)
mc_anova_pc <- anova(fit)
i = 1
mc_anova_pc[[i]]
mc_anova_II(fit)[[i]]
mc_anova_III(fit)[[i]]
i = 2
mc_anova_pc[[i]]
mc_anova_II(fit)[[i]]
mc_anova_III(fit)[[i]]
i = 3
mc_anova_pc[[i]]
mc_anova_II(fit)[[i]]
mc_anova_III(fit)[[i]]
mc_anova_disp(fit)
mc_anova_power(fit)
mc_manova(fit)
mc_manova_I(fit)
mc_manova_II(fit)
mc_manova_III(fit)
mc_manova_disp(fit)
mc_manova_power(fit)
form1 <- y1 ~ (x1+x2+x3)^2
form2 <- y2 ~ (x1)
form3 <- y3 ~ (x1+x2+x3)
Z0 <- mc_id(dados) # Identidade
Z0 <- mc_id(dados) # Identidade
fit <-
mcglm(linear_pred = c(form1,
form2,
form3),
matrix_pred = list(c(Z0, Z0),
c(),
c(Z0)),
link = c("identity","identity","identity"),
variance = c("tweedie",
"tweedie",
"tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
data = dados)
fit <-
mcglm(linear_pred = c(form1,
form2,
form3),
matrix_pred = list(c(Z0, Z0),
c(Z0),
c(Z0)),
link = c("identity","identity","identity"),
variance = c("tweedie",
"tweedie",
"tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
data = dados)
fit <-
mcglm(linear_pred = c(form1,
form2,
form3),
matrix_pred = list(c(Z0),
c(Z0),
c(Z0)),
link = c("identity","identity","identity"),
variance = c("tweedie",
"tweedie",
"tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
data = dados)
fit$beta_names
summary(fit)
mc_anova_pc <- anova(fit)
mc_anova_pc[[i]]
i = 1
mc_anova_pc[[i]]
mc_anova_III(fit)[[i]]
mc_anova_II(fit)[[i]]
mc_anova_disp(fit)
mc_anova_power(fit)
i = 2
mc_anova_pc[[i]]
mc_anova_III(fit)[[i]]
mc_anova_II(fit)[[i]]
mc_anova_I(fit)[[i]]
i = 3
mc_anova_pc[[i]]
i = 3
mc_anova_pc[[i]]
mc_anova_III(fit)[[i]]
mc_anova_II(fit)[[i]]
mc_anova_I(fit)[[i]]
mc_anova_disp(fit)
mc_anova_power(fit)
mc_manova(fit)
mc_manova_I(fit)
mc_manova_II(fit)
mc_manova_III(fit)
mc_manova_disp(fit)
mc_manova_power(fit)
mc_anova_pc[[i]]
