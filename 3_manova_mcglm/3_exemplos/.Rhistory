# Vetor tau e indice de resposta
tau <- coef(object, type = "tau")[,c(1,2, 4)]
# Número de taus por resposta
n_tau <- as.vector(table(tau$Response))
# Número de respostas
n_resp <- length(n_tau)
vcov_taus <- list()
padrao <- vector()
for (j in 1:n_resp) {
for (i in 1:length(row.names(vcov(object)))) {
padrao[i] <- sjmisc::str_contains(rownames(vcov(object))[i],
pattern = paste0('tau',j))
}
names2 <- data.frame(row_names = row.names(vcov(object)),
id = padrao)
names2 <- as.vector(subset(names2, id == TRUE)$row_names)
vcov_taus[[j]] <- vcov(object)[names2, names2]
}
p_var <- p_var
# Matriz L para todos os parâmetros (Hypothesis matrix), por resposta
L_all <- list()
for (i in 1:n_resp) {
L_all[[i]] <- diag(length(p_var[[i]]))
}
L_par <- list()
for (i in 1:n_resp) {
L_par[[i]] <- by(data = L_all[[i]],
INDICES = p_var[[i]],
FUN = as.matrix)
}
L_par
L_par[[1]][[1]]
j
subset(tau, tau$Response == j)
subset(tau, tau$Response == j)$Estimates))
subset(tau, tau$Response == j)$Estimates)
subset(tau, tau$Response == j)$Estimates
subset(tau, tau$Response == j)$Estimates[1]
L_par[[1]][[1]]
L_par[[1]][[1]]
subset(tau, tau$Response == j)
subset(tau, tau$Response == j)$Estimates))
subset(tau, tau$Response == j)$Estimates)
tau$Response
subset(tau, tau$Response == j)$Estimates))
j=1
for (j in 1:n_resp) {
W <- vector() # Vetor para a estatística de teste
gl <- vector() # Vetor para graus de liberdade
p_val <- vector() # Vetor para p-valor
for (i in 1:dim(L_par[[j]])) {
W[i] <- as.numeric((t(L_par[[j]][[i]] %*% subset(tau, tau$Response == j)$Estimates)) %*% (solve(L_par[[j]][[i]]%*%vcov_taus[[j]]%*%t(L_par[[j]][[i]]))) %*% (L_par[[j]][[i]] %*% subset(tau, tau$Response == j)$Estimates))
gl[i] <- ifelse(is.null(nrow(L_par[[j]][[i]])) == TRUE,
1,nrow(L_par[[j]][[i]]))
p_val[i] <- pchisq(W[i], df = gl[i], lower.tail = FALSE)
}
tabela[[j]] <-
data.frame(Variável = names[[j]],
GL = gl,
W = round(W, 4),
P_valor = round(p_val, 4))
}
W <- vector() # Vetor para a estatística de teste
gl <- vector() # Vetor para graus de liberdade
p_val <- vector() # Vetor para p-valor
for (i in 1:dim(L_par[[j]])) {
W[i] <- as.numeric((t(L_par[[j]][[i]] %*% subset(tau, tau$Response == j)$Estimates)) %*% (solve(L_par[[j]][[i]]%*%vcov_taus[[j]]%*%t(L_par[[j]][[i]]))) %*% (L_par[[j]][[i]] %*% subset(tau, tau$Response == j)$Estimates))
gl[i] <- ifelse(is.null(nrow(L_par[[j]][[i]])) == TRUE,
1,nrow(L_par[[j]][[i]]))
p_val[i] <- pchisq(W[i], df = gl[i], lower.tail = FALSE)
}
W[i]
gl[i]
p_val[i]
for (i in 1:dim(L_par[[j]])) {
W[i] <- as.numeric((t(L_par[[j]][[i]] %*% subset(tau, tau$Response == j)$Estimates)) %*% (solve(L_par[[j]][[i]]%*%vcov_taus[[j]]%*%t(L_par[[j]][[i]]))) %*% (L_par[[j]][[i]] %*% subset(tau, tau$Response == j)$Estimates))
gl[i] <- ifelse(is.null(nrow(L_par[[j]][[i]])) == TRUE,
1,nrow(L_par[[j]][[i]]))
p_val[i] <- pchisq(W[i], df = gl[i], lower.tail = FALSE)
}
tabela[[j]] <-
data.frame(Variável = names[[j]],
GL = gl,
W = round(W, 4),
P_valor = round(p_val, 4))
tabela <-
data.frame(Variável = names[[j]],
GL = gl,
W = round(W, 4),
P_valor = round(p_val, 4))
tabela
i=1
for (i in 1:dim(L_par[[j]])) {
W[i] <- as.numeric((t(L_par[[j]][[i]] %*% subset(tau, tau$Response == j)$Estimates)) %*% (solve(L_par[[j]][[i]]%*%vcov_taus[[j]]%*%t(L_par[[j]][[i]]))) %*% (L_par[[j]][[i]] %*% subset(tau, tau$Response == j)$Estimates))
gl[i] <- ifelse(is.null(nrow(L_par[[j]][[i]])) == TRUE,
1,nrow(L_par[[j]][[i]]))
p_val[i] <- pchisq(W[i], df = gl[i], lower.tail = FALSE)
}
tabela <-
data.frame(Variável = names[[j]],
GL = gl,
W = round(W, 4),
P_valor = round(p_val, 4))
tabela
1:dim(L_par[[j]])
j=1
i=1
W <- vector() # Vetor para a estatística de teste
gl <- vector() # Vetor para graus de liberdade
p_val <- vector() # Vetor para p-valor
L_par[[j]][[i]]
subset(tau, tau$Response == j)$Estimates))
subset(tau, tau$Response == j)$Estimates)
subset(tau, tau$Response == j)$Estimates
L_par[[j]][[i]]
L_par[[j]][[i]] %*% subset(tau, tau$Response == j)$Estimates
object = fit_jointP
p_var = list(c(0,0,0),
c(0,1,1),
c(0,1,2))
names = list(c('t1', 't2', 't3'),
c('t1', 't2', 't3'),
c('t1', 't2', 't3'))
mc_anova_disp(object = object,
p_var = p_var,
names = names)
object = fit_jointP
p_var = list(c(0,0,0),
c(0,1,1),
c(0,1,2))
names = list(c('t1'),
c('t1', 't2'),
c('t1', 't2', 't3'))
mc_anova_disp(object = object,
p_var = p_var,
names = names)
object = fit_jointP
p_var = list(c(0,0,0),
c(0,1,1),
c(0,1,2))
names = list(c('t1'),
c('t1', 't2'),
c('t1', 't2', 't3'))
mc_anova_disp(object = object,
p_var = p_var,
names = names)
# Vetor tau e indice de resposta
tau <- coef(object, type = "tau")[,c(1,2, 4)]
# Número de taus por resposta
n_tau <- as.vector(table(tau$Response))
# Número de respostas
n_resp <- length(n_tau)
vcov_taus <- list()
padrao <- vector()
for (j in 1:n_resp) {
for (i in 1:length(row.names(vcov(object)))) {
padrao[i] <- sjmisc::str_contains(rownames(vcov(object))[i],
pattern = paste0('tau',j))
}
names2 <- data.frame(row_names = row.names(vcov(object)),
id = padrao)
names2 <- as.vector(subset(names2, id == TRUE)$row_names)
vcov_taus[[j]] <- vcov(object)[names2, names2]
}
p_var <- p_var
# Matriz L para todos os parâmetros (Hypothesis matrix), por resposta
L_all <- list()
for (i in 1:n_resp) {
L_all[[i]] <- diag(length(p_var[[i]]))
}
L_par <- list()
for (i in 1:n_resp) {
L_par[[i]] <- by(data = L_all[[i]],
INDICES = p_var[[i]],
FUN = as.matrix)
}
tabela <- list()
L_par
mc_anova_disp(object = object,
p_var = p_var,
names = names)
j=1
i=1
W <- vector() # Vetor para a estatística de teste
gl <- vector() # Vetor para graus de liberdade
p_val <- vector() # Vetor para p-valor
L_par[[j]][[i]]
subset(tau, tau$Response == j)$Estimates
L_par[[j]][[i]] %*% subset(tau, tau$Response == j)$Estimates
vcov_taus[[j]]
(solve(L_par[[j]][[i]]%*%vcov_taus[[j]]%*%t(L_par[[j]][[i]])))
library(mcglm)
library(Matrix)
source('~/msc/3_manova_mcglm/2_funcoes/functions2.R')
source('~/msc/3_manova_mcglm/2_funcoes/functions.R')
dados <- read.csv2("NBA.csv",
header = T,
sep = ";",
dec = ',')
dados$X6 <- sample(as.factor(rep(c('nivel_1', 'nivel_2',
'nivel_3', 'nivel_4',
'nivel_5', 'nivel_6'), 9)))
names(dados) <- c('x1', 'x2', 'y1', 'y2', 'y3', 'x3')
summary(dados)
disp <- function(form, data){
plot(form, data)
abline(lm(form, data), col = 2, lwd = 2)
}
x11()
par(mfrow = c(3,3))
disp(y1~x1, dados)
disp(y1~x2, dados)
plot(y1~x3, dados)
disp(y2~x1, dados)
disp(y2~x2, dados)
plot(y2~x3, dados)
disp(y3~x1, dados)
disp(y3~x2, dados)
plot(y3~x3, dados)
cor1 <- cor(dados[,-ncol(dados)])
par(mfrow = c(1,1))
corrplot::corrplot.mixed(cor1,
lower = 'number',
upper = 'ellipse')
form1 <- y1 ~ x1+x2+x3
form2 <- y2 ~ x1+x2+x3
form3 <- y3 ~ x1+x2+x3
Z0 <- mc_id(dados) # Identidade
fit <-
mcglm(linear_pred = c(form1,
form2,
form3),
matrix_pred = list(c(Z0),
c(Z0),
c(Z0)),
link = c("identity","identity","identity"),
variance = c("tweedie",
"tweedie",
"tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
data = dados)
fit$beta_names[[1]]
summary(fit)
fit$beta_names[[1]]
summary(fit)
mc_anova_pc <- anova(fit)
i = 1
mc_anova_pc[[i]]
mc_anova_III(fit)[[i]]
mc_anova_II(fit)[[i]]
mc_anova_I(fit)[[i]]
mc_anova_disp(fit)
mc_anova_disp(object =  fit,
p_var = c(0,0,0),
names = c('t0', 't0', 't0'))
mc_anova_disp(object =  fit,
p_var = c(1,1,1),
names = c('t0', 't0', 't0'))
mc_manova(fit)
mc_manova_III(fit)
mc_manova_II(fit)
mc_manova_I(fit)
mc_manova_disp(fit)
list(0,0,0)
mc_manova_disp(fit,
p_var = list(0,0,0))
mc_manova_disp(fit,
p_var = list(0,0,0),
names = list('t1'))
mc_manova_disp(fit,
p_var = list(0),
names = list('t1'))
mc_manova_disp(fit,
p_var = list(0),
names = list('t1'))
mc_manova_disp(fit,
p_var = list(0),
names = 't1')
mc_manova_disp(fit,
p_var = list(0),
names = list(c('t1')))
mc_manova_disp(fit,
p_var = 0,
names = 't1')
form1 <- y1 ~ (x1+x2+x3)^2
form2 <- y2 ~ (x1+x2+x3)^2
form3 <- y3 ~ (x1+x2+x3)^2
Z0 <- mc_id(dados) # Identidade
fit <-
mcglm(linear_pred = c(form1,
form2,
form3),
matrix_pred = list(c(Z0),
c(Z0),
c(Z0)),
link = c("identity","identity","identity"),
variance = c("tweedie",
"tweedie",
"tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
data = dados)
fit$beta_names[[1]]
summary(fit)
mc_anova_pc <- anova(fit)
i = 1
mc_anova_pc[[i]]
mc_anova_I(fit)[[i]]
mc_anova_II(fit)[[i]]
mc_anova_III(fit)[[i]]
mc_anova_disp(fit)
mc_anova_disp(object =  fit,
p_var = c(0,0,0),
names = c('t0', 't0', 't0'))
mc_manova(fit)
mc_manova_I(fit)
mc_manova_II(fit)
mc_manova_III(fit)
mc_manova_disp(fit,
p_var = 0,
names = 't1')
library(mcglm)
library(Matrix)
source('~/msc/3_manova_mcglm/2_funcoes/functions2.R')
source('~/msc/3_manova_mcglm/2_funcoes/functions.R')
#---------------------------------------------------------------
dados <- read.csv2("dados_ovelhas.csv",
header = T,
sep = ";",
dec = ',')
dados2 <- dados[,c(1,2,3,4,
14,15,17,21,
7,9,10,11)]
dados2$momento <- ordered(dados2$tempo,
levels=c("Antes", "Durante", "Depois"))
form.ncorpo  <- ncorpo  ~ (sessao + tempo + linhagem)
form.ncorpo2 <- ncabeca ~ (sessao + tempo + linhagem)
form.ncorpo3 <- norelha ~ (sessao + tempo + linhagem)
Z0 <- mc_id(dados2) # Identidade
Z1 <- mc_mixed(~0 + factor(animal), data = dados2) # Animal
dados2$comb <- paste(dados2$animal, dados2$sessao)
Z2 <- mc_mixed(~0 + comb, data = dados2) # Animal Momento
fit_jointP <-
mcglm(linear_pred = c(form.ncorpo,
form.ncorpo2,
form.ncorpo3),
matrix_pred = list(c(Z0, Z1, Z2),
c(Z0, Z1, Z2),
c(Z0, Z1, Z2)),
link = c("log","log","log"),
variance = c("poisson_tweedie",
"poisson_tweedie",
"poisson_tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F, F, F),
data = dados2)
fit_jointP$beta_names[[1]]
summary(fit_jointP)
mc_anova_pc <- anova(fit_jointP)
i = 1
mc_anova_pc[[i]]
mc_anova_I(fit_jointP)[[i]]
mc_anova_II(fit_jointP)[[i]]
mc_anova_III(fit_jointP)[[i]]
mc_anova_disp(fit_jointP)
mc_anova_disp(object =  fit,
p_var = p_var = list(c(0),
c(0),
c(0)),
names = c('t0', 't0', 't0'))
mc_anova_disp(object =  fit,
p_var = p_var = list(c(0),
c(0),
c(0)),
names = c('t0', 't0', 't0'))
c(0),
mc_anova_disp(object =  fit,
p_var = list(c(0),
c(0),
c(0)),
names = c('t0', 't0', 't0'))
mc_anova_disp(object =  fit,
p_var = list(c(0),
c(0),
c(0)),
names = list(c('t1'),
c('t1'),
c('t1')))
mc_anova_disp(fit_jointP,
p_var = list(c(0,0,0),
c(0,1,1),
c(0,1,2)),
names = list(c('t1'),
c('t1', 't2'),
c('t1', 't2', 't3')))
mc_anova_disp(fit_jointP,
p_var = list(c(0,1,2),
c(0,1,2),
c(0,1,2)),
names = list(c('t1', 't2', 't3'),
c('t1', 't2', 't3'),
c('t1', 't2', 't3')))
mc_manova(fit_jointP)
mc_manova_I(fit_jointP)
mc_manova_II(fit_jointP)
mc_manova_III(fit_jointP)
mc_manova_disp(fit_jointP, p_var = c(0,0,0), names = c('t1'))
mc_manova_disp(fit_jointP,
p_var = c(0,0,0),
names = c('t1'))
mc_manova_disp(fit_jointP,
p_var = c(0,0,0),
names = c('t0'))
mc_manova_disp(fit_jointP,
p_var = c(0,1,2),
names = c('t1', 't2', 't3'))
mc_manova_disp(fit_jointP,
p_var = c(0,0,2),
names = c('t1', 't2', 't3'))
mc_manova_disp(fit_jointP,
p_var = c(0,0,2),
names = c('t1', 't2'))
form.ncorpo  <- ncorpo  ~ (sessao + tempo + linhagem)^2
form.ncorpo2 <- ncabeca ~ (sessao + tempo + linhagem)^2
form.ncorpo3 <- norelha ~ (sessao + tempo + linhagem)^2
Z0 <- mc_id(dados2) # Identidade
Z1 <- mc_mixed(~0 + factor(animal), data = dados2) # Animal
dados2$comb <- paste(dados2$animal, dados2$sessao)
Z2 <- mc_mixed(~0 + comb, data = dados2) # Animal Momento
fit_jointP <-
mcglm(linear_pred = c(form.ncorpo,
form.ncorpo2,
form.ncorpo3),
matrix_pred = list(c(Z0, Z1, Z2),
c(Z0, Z1, Z2),
c(Z0, Z1, Z2)),
link = c("log","log","log"),
variance = c("poisson_tweedie",
"poisson_tweedie",
"poisson_tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F, F, F),
data = dados2)
fit_jointP$beta_names[[1]]
summary(fit_jointP)
mc_anova_pc <- anova(fit_jointP)
i = 1
mc_anova_pc[[i]]
mc_anova_I(fit_jointP)[[i]]
mc_anova_II(fit_jointP)[[i]]
mc_anova_III(fit_jointP)[[i]]
mc_anova_disp(fit_jointP)
mc_anova_power(fit_jointP)
mc_anova_disp(fit_jointP,
p_var = list(c(0,1,2),
c(0,1,2),
c(0,1,2)),
names = list(c('t1', 't2', 't3'),
c('t1', 't2', 't3'),
c('t1', 't2', 't3')))
mc_anova_disp(fit_jointP,
p_var = list(c(0,1,1),
c(0,1,2),
c(0,1,2)),
names = list(c('t1', 't2', 't3'),
c('t1', 't2', 't3'),
c('t1', 't2', 't3')))
mc_anova_disp(fit_jointP,
p_var = list(c(0,1,1),
c(0,1,2),
c(0,1,2)),
names = list(c('t1', 't2'),
c('t1', 't2', 't3'),
c('t1', 't2', 't3')))
mc_manova(fit_jointP)
mc_manova_I(fit_jointP)
mc_manova_II(fit_jointP)
mc_manova_III(fit_jointP)
mc_manova_disp(fit_jointP)
mc_manova_power(fit_jointP)
mc_manova_disp(fit_jointP,
p_var = c(0,1,2),
names = c('t1', 't2', 't3'))
mc_manova_disp(fit_jointP,
p_var = c(0,1),
names = c('t1', 't2', 't3'))
mc_manova_disp(fit_jointP,
p_var = c(0,1),
names = c('t1', 't2'))
mc_manova_disp(fit_jointP,
p_var = c(0,1,1),
names = c('t1', 't2', 't3'))
mc_manova_disp(fit_jointP,
p_var = c(0,1,1),
names = c('t1', 't2'))
mc_manova_disp(fit_jointP,
p_var = c(0,0,0),
names = c('t1'))
mc_manova_disp(fit_jointP,
p_var = c(0,0,2),
names = c('t1', 't2'))
