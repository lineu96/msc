2, simplify = T))
t
ids <- data.frame(i1 = t[,1],
i2 = t[,2])
ids <- subset(ids, i1 != i2)
plyr::arrange(ids, i1,i2)
id_II
beta_names <- rownames(summary(fit_jointP,
print = F)$`Resp.Variable 1`$Regression)
beta_names
teste2 <- data.frame(beta_names = beta_names,
interacao = stringr::str_detect(beta_names, ':'),
id_III = attr(fit_jointP$list_X[[1]], "assign"))
teste2
id_II <- ifelse(teste2$interacao == TRUE, NA, teste2$id_III)
id_II
t<-t(combn(factor(subset(teste2, interacao == F & id_II != 0)$id_II),
2, simplify = T))
t
ids <- data.frame(i1 = t[,1],
i2 = t[,2])
ids <- subset(ids, i1 != i2)
plyr::arrange(ids, i1,i2)
p_var
F_all
diag(length(p_var))
by(data = F_all,
INDICES = p_var,
FUN = as.matrix)
# Matriz F para todos os parâmetros (Hypothesis matrix)
F_all <- diag(length(p_var))
# Matriz F por variável (Hypothesis matrix)
F_par <- by(data = F_all,
INDICES = p_var,
FUN = as.matrix)
F_par
beta_names <- rownames(summary(fit_jointP,
print = F)$`Resp.Variable 1`$Regression)
beta_names
teste2 <- data.frame(beta_names = beta_names,
interacao = stringr::str_detect(beta_names, ':'),
id_III = attr(fit_jointP$list_X[[1]], "assign"))
teste2
id_II <- ifelse(teste2$interacao == TRUE, NA, teste2$id_III)
id_II
t<-t(combn(factor(subset(teste2, interacao == F & id_II != 0)$id_II),
2, simplify = T))
t
ids <- data.frame(i1 = t[,1],
i2 = t[,2])
ids <- subset(ids, i1 != i2)
ids <- plyr::arrange(ids, i1,i2)
ids
id_II
subset(id_II != NA)
subset(id_II, id_II != NA)
subset(id_II, is.na(id_II) == T)
subset(id_II, is.na(id_II) == F)
ids
c(subset(id_II, is.na(id_II) == F), ids[,1])
c(subset(id_II, is.na(id_II) == F), ids[,2])
data.frame(a = c(subset(id_II, is.na(id_II) == F), ids[,1]),
b = c(subset(id_II, is.na(id_II) == F), ids[,2]))
data.frame(a = c(subset(id_II, is.na(id_II) == F), ids[,1]),
b = c(subset(id_II, is.na(id_II) == F), ids[,2]))
beta_names <- rownames(summary(fit_jointP,
print = F)$`Resp.Variable 1`$Regression)
beta_names
teste2 <- data.frame(beta_names = beta_names,
interacao = stringr::str_detect(beta_names, ':'),
id_III = attr(fit_jointP$list_X[[1]], "assign"))
teste2
id_II <- ifelse(teste2$interacao == TRUE, NA, teste2$id_III)
id_II
t<-t(combn(factor(subset(teste2, interacao == F & id_II != 0)$id_II),
2, simplify = T))
t
ids <- data.frame(i1 = t[,1],
i2 = t[,2])
ids
ids <- subset(ids, i1 != i2)
ids
ids <- plyr::arrange(ids, i1,i2)
ids
model.matrix(fit_jointP)
fit_jointP$linear_pred
fit_jointP$Regression
fit_jointP$C
fit_jointP$beta_names
fit_jointP$beta_names[[1]]
fit_jointP$list_X
attr(fit_jointP$list_X[[1]], "assign")
attr(fit_jointP$list_X[[2]], "assign")
attr(fit_jointP$list_X[[3]], "assign")
attr(fit_jointP$list_X[[1]], "assign")
attr(fit_jointP$list_X[[1]])
fit_jointP$list_X
attr(fit_jointP$list_X[[1]], "contrasts")
fit_jointP$list_X
attr(fit_jointP$list_X[[1]], "assign")
attr(fit_jointP$list_X[[3]], "assign")
(fit_jointP$list_X[[1]])
(fit_jointP$list_X)
listx <- fit_jointP$list_X[[1]]
listx
listx[[1]]
listx[[2]]
listx[[3]]
class(listx)
dim(listx)
listx[1:14,]
listx[1:14,]
dir()
read.csv("testes_tipoIII.csv")
read.csv("testes_tipoIII.csv", header = T)
read.csv2("testes_tipoIII",
header = T,
sep = ";",
dec = ',')
dir()
read.csv2("testes_tipoIII.csv",
header = T,
sep = ";",
dec = ',')
diag(length(p_var))
# Índice que associa beta a variável
p_var <- attr(fit_jointP$list_X[[1]], "assign")
p_var
diag(length(p_var))
by(data = F_all,
INDICES = p_var,
FUN = as.matrix)
#----------------------------------------------------------------
library(mcglm)
dados <- read.csv2("dados_ovelhas.csv",
header = T,
sep = ";",
dec = ',')
dados2 <- dados[,c(1,2,3,4,
14,15,17,21,
7,9,10,11)]
dados2$momento <- ordered(dados2$tempo,
levels=c("Antes", "Durante", "Depois"))
form.ncorpo <- ncorpo ~ (sessao + tempo + linhagem)^2
form.ncorpo2 <- ncabeca ~ (sessao + tempo + linhagem)^2
form.ncorpo3 <- norelha ~ (sessao + tempo + linhagem)^2
Z0 <- mc_id(dados2) # Identidade
Z1 <- mc_mixed(~0 + factor(animal), data = dados2) # Animal
dados2$comb <- paste(dados2$animal, dados2$sessao)
Z2 <- mc_mixed(~0 + comb, data = dados2) # Animal Momento
fit_jointP <-
mcglm(linear_pred = c(form.ncorpo,
form.ncorpo2,
form.ncorpo3),
matrix_pred = list(c(Z0, Z1, Z2),
c(Z0, Z1, Z2),
c(Z0, Z1, Z2)),
link = c("log","log","log"),
variance = c("poisson_tweedie",
"poisson_tweedie",
"poisson_tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F, F, F),
data = dados2)
summary(fit_jointP)
# Vetor beta chapeu
beta <- coef(fit_jointP, type = "beta")[,c(1, 4)]
beta
# Número de betas
n_beta <- sum(as.vector(table(beta$Response)))
n_beta
# Número de respostas
n_resp <- length(as.vector(table(beta$Response)))
n_resp
# vcov desconsiderando parametros de dispersao e potencia
vcov_betas <- vcov(fit_jointP)[1:n_beta, 1:n_beta]
# Índice que associa beta a variável
p_var <- attr(fit_jointP$list_X[[1]], "assign")
p_var
p_var <- read.csv2("testes_tipoIII.csv",
header = T,
sep = ";",
dec = ',')
p_var
length(p_var)
nrow(p_var)
diag(nrow(p_var))
# Matriz F para todos os parâmetros (Hypothesis matrix)
F_all <- diag(nrow(p_var))
F_all
p_var
i:(ncol(p_var)-1)
1:(ncol(p_var)-1)
2:ncol(p_var)
for (i in 2:ncol(p_var)) {
by(data = F_all,
INDICES = p_var[,i],
FUN = as.matrix)
}
print(by(data = F_all,
INDICES = p_var[,i],
FUN = as.matrix)   )
F_all
p_var[,1]
p_var[,2]
by(data = F_all,
INDICES = p_var[,2],
FUN = as.matrix)
by(data = F_all,
INDICES = p_var[,2],
FUN = as.matrix)[1]
by(data = F_all,
INDICES = p_var[,2],
FUN = as.matrix)
x<-by(data = F_all,
INDICES = p_var[,2],
FUN = as.matrix)
x$`1`
write.csv(x$`1`)
F_par <-
x<-by(data = F_all,
INDICES = p_var[,2],
FUN = as.matrix)
class(x)
x
F_par <- list()
F_par
F_all
p_var
2:ncol(p_var)
for (i in 2:ncol(p_var)) {
F_par[[i]] <- by(data = F_all,
INDICES = p_var[,i],
FUN = as.matrix)$`1`
}
F_par
for (i in 2:ncol(p_var)) {
F_par[[i-1]] <- by(data = F_all,
INDICES = p_var[,i],
FUN = as.matrix)$`1`
}
F_par
#----------------------------------------------------------------
library(mcglm)
dados <- read.csv2("dados_ovelhas.csv",
header = T,
sep = ";",
dec = ',')
dados2 <- dados[,c(1,2,3,4,
14,15,17,21,
7,9,10,11)]
dados2$momento <- ordered(dados2$tempo,
levels=c("Antes", "Durante", "Depois"))
#----------------------------------------------------------------
library(mcglm)
dados <- read.csv2("dados_ovelhas.csv",
header = T,
sep = ";",
dec = ',')
dados2 <- dados[,c(1,2,3,4,
14,15,17,21,
7,9,10,11)]
dados2$momento <- ordered(dados2$tempo,
levels=c("Antes", "Durante", "Depois"))
form.ncorpo <- ncorpo ~ (sessao + tempo + linhagem)^2
form.ncorpo2 <- ncabeca ~ (sessao + tempo + linhagem)^2
form.ncorpo3 <- norelha ~ (sessao + tempo + linhagem)^2
Z0 <- mc_id(dados2) # Identidade
Z1 <- mc_mixed(~0 + factor(animal), data = dados2) # Animal
dados2$comb <- paste(dados2$animal, dados2$sessao)
Z2 <- mc_mixed(~0 + comb, data = dados2) # Animal Momento
fit_jointP <-
mcglm(linear_pred = c(form.ncorpo,
form.ncorpo2,
form.ncorpo3),
matrix_pred = list(c(Z0, Z1, Z2),
c(Z0, Z1, Z2),
c(Z0, Z1, Z2)),
link = c("log","log","log"),
variance = c("poisson_tweedie",
"poisson_tweedie",
"poisson_tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F, F, F),
data = dados2)
summary(fit_jointP)
# Vetor beta chapeu
beta <- coef(fit_jointP, type = "beta")[,c(1, 4)]
beta
# Número de betas
n_beta <- sum(as.vector(table(beta$Response)))
n_beta
# Número de respostas
n_resp <- length(as.vector(table(beta$Response)))
n_resp
# vcov desconsiderando parametros de dispersao e potencia
vcov_betas <- vcov(fit_jointP)[1:n_beta, 1:n_beta]
vcov_betas
p_var <- read.csv2("testes_tipoIII.csv",
header = T,
sep = ";",
dec = ',')
p_var
# Matriz F para todos os parâmetros (Hypothesis matrix)
F_all <- diag(nrow(p_var))
F_all
# Matriz F por variável (Hypothesis matrix)
F_par <- list()
for (i in 2:ncol(p_var)) {
F_par[[i-1]] <- by(data = F_all,
INDICES = p_var[,i],
FUN = as.matrix)$`1`
}
# Matriz G
G <- diag(n_resp)
G
L_par <- list()
for (i in 1:length(F_par)) {
L_par[[i]] <- kronecker(G, F_par[[i]])
}
W <- vector() # Vetor para a estatística de teste
gl <- vector() # Vetor para graus de liberdade
p_val <- vector() # Vetor para p-valor
for (i in 1:length(L_par)) {
W[i] <- as.numeric((t(L_par[[i]]%*%beta$Estimates)) %*% (solve(L_par[[i]]%*%vcov_betas%*%t(L_par[[i]]))) %*% (L_par[[i]]%*%beta$Estimates))
gl[i] <- nrow(L_par[[i]])
p_val[i] <- pchisq(W[i], df = gl[i], lower.tail = FALSE)
}
tabela <- data.frame(Variável = c("Intercept",
attr(terms(fit_jointP$linear_pred[[1]]), "term.labels")),
GL = gl,
W = round(W, 3),
P_valor = round(p_val, 3))
tabela
tabela <- data.frame(Variável = c("Intercept",
attr(terms(fit_jointP$linear_pred[[1]]), "term.labels")),
GL = gl,
W = round(W, 3),
P_valor = round(p_val, 3))
for (i in 1:length(L_par)) {
W[i] <- as.numeric((t(L_par[[i]]%*%beta$Estimates)) %*% (solve(L_par[[i]]%*%vcov_betas%*%t(L_par[[i]]))) %*% (L_par[[i]]%*%beta$Estimates))
gl[i] <- nrow(L_par[[i]])
p_val[i] <- pchisq(W[i], df = gl[i], lower.tail = FALSE)
}
W
gl
p_val
L_par
p_var <- read.csv2("testes_tipoIII.csv",
header = T,
sep = ";",
dec = ',')
p_var
# Matriz F para todos os parâmetros (Hypothesis matrix)
F_all <- diag(nrow(p_var))
F_all
# Matriz F por variável (Hypothesis matrix)
F_par <- list()
for (i in 2:ncol(p_var)) {
F_par[[i-1]] <- by(data = F_all,
INDICES = p_var[,i],
FUN = as.matrix)$`1`
}
F_par
# Matriz G
G <- diag(n_resp)
G
L_par <- list()
for (i in 1:length(F_par)) {
L_par[[i]] <- kronecker(G, F_par[[i]])
}
W <- vector() # Vetor para a estatística de teste
gl <- vector() # Vetor para graus de liberdade
p_val <- vector() # Vetor para p-valor
for (i in 1:length(L_par)) {
W[i] <- as.numeric((t(L_par[[i]]%*%beta$Estimates)) %*% (solve(L_par[[i]]%*%vcov_betas%*%t(L_par[[i]]))) %*% (L_par[[i]]%*%beta$Estimates))
gl[i] <- nrow(L_par[[i]])
p_val[i] <- pchisq(W[i], df = gl[i], lower.tail = FALSE)
}
W
# Número de betas
n_beta <- sum(as.vector(table(beta$Response)))
# Número de respostas
n_resp <- length(as.vector(table(beta$Response)))
# vcov desconsiderando parametros de dispersao e potencia
vcov_betas <- vcov(fit_jointP)[1:n_beta, 1:n_beta]
p_var <- read.csv2("testes_tipoIII.csv",
header = T,
sep = ";",
dec = ',')
# Matriz F para todos os parâmetros (Hypothesis matrix)
F_all <- diag(nrow(p_var))
# Matriz F por variável (Hypothesis matrix)
F_par <- list()
for (i in 2:ncol(p_var)) {
F_par[[i-1]] <- by(data = F_all,
INDICES = p_var[,i],
FUN = as.matrix)$`1`
}
# Matriz G
G <- diag(n_resp)
L_par <- list()
for (i in 1:length(F_par)) {
L_par[[i]] <- kronecker(G, F_par[[i]])
}
W <- vector() # Vetor para a estatística de teste
gl <- vector() # Vetor para graus de liberdade
p_val <- vector() # Vetor para p-valor
for (i in 1:length(L_par)) {
W[i] <- as.numeric((t(L_par[[i]]%*%beta$Estimates)) %*% (solve(L_par[[i]]%*%vcov_betas%*%t(L_par[[i]]))) %*% (L_par[[i]]%*%beta$Estimates))
gl[i] <- nrow(L_par[[i]])
p_val[i] <- pchisq(W[i], df = gl[i], lower.tail = FALSE)
}
tabela <- data.frame(Variável = c("Intercept",
attr(terms(fit_jointP$linear_pred[[1]]), "term.labels")),
GL = gl,
W = round(W, 3),
P_valor = round(p_val, 3))
tabela
mc_manova(fit_jointP)
F_par
3*8
#----------------------------------------------------------------
library(mcglm)
dados <- read.csv2("dados_ovelhas.csv",
header = T,
sep = ";",
dec = ',')
dados2 <- dados[,c(1,2,3,4,
14,15,17,21,
7,9,10,11)]
dados2$momento <- ordered(dados2$tempo,
levels=c("Antes", "Durante", "Depois"))
form.ncorpo <- ncorpo ~ (sessao + tempo + linhagem)^2
form.ncorpo2 <- ncabeca ~ (sessao + tempo + linhagem)^2
form.ncorpo3 <- norelha ~ (sessao + tempo + linhagem)^2
Z0 <- mc_id(dados2) # Identidade
Z1 <- mc_mixed(~0 + factor(animal), data = dados2) # Animal
dados2$comb <- paste(dados2$animal, dados2$sessao)
Z2 <- mc_mixed(~0 + comb, data = dados2) # Animal Momento
fit_jointP <-
mcglm(linear_pred = c(form.ncorpo,
form.ncorpo2,
form.ncorpo3),
matrix_pred = list(c(Z0, Z1, Z2),
c(Z0, Z1, Z2),
c(Z0, Z1, Z2)),
link = c("log","log","log"),
variance = c("poisson_tweedie",
"poisson_tweedie",
"poisson_tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F, F, F),
data = dados2)
summary(fit_jointP)
# Vetor beta chapeu
beta <- coef(fit_jointP, type = "beta")[,c(1, 4)]
# Número de betas
n_beta <- sum(as.vector(table(beta$Response)))
# Número de respostas
n_resp <- length(as.vector(table(beta$Response)))
# vcov desconsiderando parametros de dispersao e potencia
vcov_betas <- vcov(fit_jointP)[1:n_beta, 1:n_beta]
p_var <- read.csv2("testes_tipoIII.csv",
header = T,
sep = ";",
dec = ',')
# Matriz F para todos os parâmetros (Hypothesis matrix)
F_all <- diag(nrow(p_var))
# Matriz F por variável (Hypothesis matrix)
F_par <- list()
for (i in 2:ncol(p_var)) {
F_par[[i-1]] <- by(data = F_all,
INDICES = p_var[,i],
FUN = as.matrix)$`1`
}
# Matriz G
G <- diag(n_resp)
L_par <- list()
for (i in 1:length(F_par)) {
L_par[[i]] <- kronecker(G, F_par[[i]])
}
W <- vector() # Vetor para a estatística de teste
gl <- vector() # Vetor para graus de liberdade
p_val <- vector() # Vetor para p-valor
for (i in 1:length(L_par)) {
W[i] <- as.numeric((t(L_par[[i]]%*%beta$Estimates)) %*% (solve(L_par[[i]]%*%vcov_betas%*%t(L_par[[i]]))) %*% (L_par[[i]]%*%beta$Estimates))
gl[i] <- nrow(L_par[[i]])
p_val[i] <- pchisq(W[i], df = gl[i], lower.tail = FALSE)
}
tabela <- data.frame(Variável = c("Intercept",
attr(terms(fit_jointP$linear_pred[[1]]), "term.labels")),
GL = gl,
W = round(W, 3),
P_valor = round(p_val, 3))
tabela
summary(fit_jointP)
beta
oef(fit_jointP, type = "beta")
coef(fit_jointP, type = "beta")
anova(fit_jointP)
tabela
mc_manova(fit_jointP)
