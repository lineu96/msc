interacao = stringr::str_detect(beta_names[[i]], ':'))
}
for (i in 1:length(L_all)) {
for (j in 1:(length(expand[[i]]))) {
testes[[i]][,j+2] <- colSums(expand[[i]][[j]])
}
}
aux <- list()
for (k in 1:length(L_all)) {
for (i in 3:ncol(testes[[k]])) {
padrao <- as.vector(subset(testes[[k]], interacao == FALSE & testes[[k]][,i] == 1)$beta_names)
x <- matrix(nrow = nrow(testes[[k]]), ncol = length(padrao))
for (j in 1:nrow(testes[[k]])) {
x[j,] <- stringr::str_detect(testes[[k]]$beta_names[j],
pattern = padrao)
}
aux[[k]][[i]] <- list()
aux[[k]][[i]] <- ifelse(rowSums(x) == 1, 1, testes[[k]][,i])
as.vector(aux[[k]][[i]])
}
}
#----------------------------------------------------------------
library(mcglm)
dados <- read.csv2("dados_ovelhas.csv",
header = T,
sep = ";",
dec = ',')
dados2 <- dados[,c(1,2,3,4,
14,15,17,21,
7,9,10,11)]
dados2$momento <- ordered(dados2$tempo,
levels=c("Antes", "Durante", "Depois"))
form.ncorpo <- ncorpo ~ sessao
form.ncorpo2 <- ncorpo ~ sessao + tempo
form.ncorpo3 <- ncorpo ~ sessao + tempo + linhagem
form.ncorpo4 <- ncorpo ~ (sessao + tempo + linhagem)^2
Z0 <- mc_id(dados2) # Identidade
Z1 <- mc_mixed(~0 + factor(animal), data = dados2) # Animal
dados2$comb <- paste(dados2$animal, dados2$sessao)
Z2 <- mc_mixed(~0 + comb, data = dados2) # Animal Momento
fit_jointP <-
mcglm(linear_pred = c(form.ncorpo,
form.ncorpo2,
form.ncorpo3,
form.ncorpo4),
matrix_pred = list(c(Z0, Z1, Z2),
c(Z0, Z1, Z2),
c(Z0, Z1, Z2),
c(Z0, Z1, Z2)),
link = c("log","log","log","log"),
variance = c("poisson_tweedie",
"poisson_tweedie",
"poisson_tweedie",
"poisson_tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F, F, F, F),
data = dados2)
summary(fit_jointP)
# Vetor beta chapeu e indice de resposta
beta <- coef(fit_jointP, type = "beta")[,c(1, 4)]
# Número de betas por resposta
n_beta <- as.vector(table(beta$Response))
# Número de respostas
n_resp <- length(n_beta)
vcov_betas <- list()
vcov_betas[[1]] <- vcov(fit_jointP)[1:n_beta[1], 1:n_beta[1]]
for (i in 2:n_resp) {
vcov_betas[[i]] <-
vcov(fit_jointP)[(cumsum(n_beta)[i-1]+1):(cumsum(n_beta)[i]),
(cumsum(n_beta)[i-1]+1):(cumsum(n_beta)[i])]
}
p_var <- list()
for (i in 1:n_resp) {
p_var[[i]] <- attr(fit_jointP$list_X[[i]], "assign")
}
# Matriz L para todos os parâmetros (Hypothesis matrix), por resposta
L_all <- list()
for (i in 1:n_resp) {
L_all[[i]] <- diag(length(p_var[[i]]))
}
#----------------------------------------------------------------
expand <- list()
for (i in 1:length(L_all)) {
expand[[i]] <- by(data = L_all[[i]],
INDICES = p_var[[i]],
FUN = as.matrix)
}
beta_names <- list()
for (i in 1:length(L_all)) {
beta_names[[i]] <- fit_jointP$beta_names[[i]]
}
testes <- list()
for (i in 1:length(L_all)) {
testes[[i]] <- data.frame(beta_names = beta_names[[i]],
interacao = stringr::str_detect(beta_names[[i]], ':'))
}
for (i in 1:length(L_all)) {
for (j in 1:(length(expand[[i]]))) {
testes[[i]][,j+2] <- colSums(expand[[i]][[j]])
}
}
aux <- list()
for (k in 1:length(L_all)) {
for (i in 3:ncol(testes[[k]])) {
padrao <- as.vector(subset(testes[[k]], interacao == FALSE & testes[[k]][,i] == 1)$beta_names)
x <- matrix(nrow = nrow(testes[[k]]), ncol = length(padrao))
for (j in 1:nrow(testes[[k]])) {
x[j,] <- stringr::str_detect(testes[[k]]$beta_names[j],
pattern = padrao)
}
aux[[k]][[i]] <- list()
aux[[k]][[i]] <- ifelse(rowSums(x) == 1, 1, testes[[k]][,i])
as.vector(aux[[k]][[i]])
}
}
k=1
k=1
i=3
j=2
padrao <- as.vector(subset(testes[[k]], interacao == FALSE & testes[[k]][,i] == 1)$beta_names)
padrao
x <- matrix(nrow = nrow(testes[[k]]), ncol = length(padrao))
x
for (j in 1:nrow(testes[[k]])) {
x[j,] <- stringr::str_detect(testes[[k]]$beta_names[j],
pattern = padrao)
}
x
aux[[k]][[i]] <- list()
aux <- list()
aux[[k]][[i]]
aux <- list()
dim(aux)
dim(aux) <- n_resp
length(aux) <- n_resp
aux
#----------------------------------------------------------------
library(mcglm)
#----------------------------------------------------------------
library(mcglm)
dados <- read.csv2("dados_ovelhas.csv",
header = T,
sep = ";",
dec = ',')
dados2 <- dados[,c(1,2,3,4,
14,15,17,21,
7,9,10,11)]
dados2$momento <- ordered(dados2$tempo,
levels=c("Antes", "Durante", "Depois"))
form.ncorpo <- ncorpo ~ sessao
form.ncorpo2 <- ncorpo ~ sessao + tempo
form.ncorpo3 <- ncorpo ~ sessao + tempo + linhagem
form.ncorpo4 <- ncorpo ~ (sessao + tempo + linhagem)^2
Z0 <- mc_id(dados2) # Identidade
Z1 <- mc_mixed(~0 + factor(animal), data = dados2) # Animal
dados2$comb <- paste(dados2$animal, dados2$sessao)
Z2 <- mc_mixed(~0 + comb, data = dados2) # Animal Momento
fit_jointP <-
mcglm(linear_pred = c(form.ncorpo,
form.ncorpo2,
form.ncorpo3,
form.ncorpo4),
matrix_pred = list(c(Z0, Z1, Z2),
c(Z0, Z1, Z2),
c(Z0, Z1, Z2),
c(Z0, Z1, Z2)),
link = c("log","log","log","log"),
variance = c("poisson_tweedie",
"poisson_tweedie",
"poisson_tweedie",
"poisson_tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F, F, F, F),
data = dados2)
summary(fit_jointP)
# Vetor beta chapeu e indice de resposta
beta <- coef(fit_jointP, type = "beta")[,c(1, 4)]
# Número de betas por resposta
n_beta <- as.vector(table(beta$Response))
# Número de respostas
n_resp <- length(n_beta)
vcov_betas <- list()
vcov_betas[[1]] <- vcov(fit_jointP)[1:n_beta[1], 1:n_beta[1]]
for (i in 2:n_resp) {
vcov_betas[[i]] <-
vcov(fit_jointP)[(cumsum(n_beta)[i-1]+1):(cumsum(n_beta)[i]),
(cumsum(n_beta)[i-1]+1):(cumsum(n_beta)[i])]
}
p_var <- list()
for (i in 1:n_resp) {
p_var[[i]] <- attr(fit_jointP$list_X[[i]], "assign")
}
# Matriz L para todos os parâmetros (Hypothesis matrix), por resposta
L_all <- list()
for (i in 1:n_resp) {
L_all[[i]] <- diag(length(p_var[[i]]))
}
#----------------------------------------------------------------
expand <- list()
for (i in 1:length(L_all)) {
expand[[i]] <- by(data = L_all[[i]],
INDICES = p_var[[i]],
FUN = as.matrix)
}
beta_names <- list()
for (i in 1:length(L_all)) {
beta_names[[i]] <- fit_jointP$beta_names[[i]]
}
testes <- list()
for (i in 1:length(L_all)) {
testes[[i]] <- data.frame(beta_names = beta_names[[i]],
interacao = stringr::str_detect(beta_names[[i]], ':'))
}
for (i in 1:length(L_all)) {
for (j in 1:(length(expand[[i]]))) {
testes[[i]][,j+2] <- colSums(expand[[i]][[j]])
}
}
aux <- list()
length(aux) <- n_resp
for (k in 1:length(L_all)) {
for (i in 3:ncol(testes[[k]])) {
padrao <- as.vector(subset(testes[[k]], interacao == FALSE & testes[[k]][,i] == 1)$beta_names)
x <- matrix(nrow = nrow(testes[[k]]), ncol = length(padrao))
for (j in 1:nrow(testes[[k]])) {
x[j,] <- stringr::str_detect(testes[[k]]$beta_names[j],
pattern = padrao)
}
aux[[k]][[i]] <- list()
aux[[k]][[i]] <- ifelse(rowSums(x) == 1, 1, testes[[k]][,i])
as.vector(aux[[k]][[i]])
}
}
aux2 <- list()
for (i in 1:length(aux)) {
aux2[[i]] <- as.data.frame(do.call(cbind, aux[[i]]))
}
p_varII <- aux2
p_varII
L_par <- list()
i=1
L_par[[i]]
L_par
L_all
L_all[[1]]
p_varII
p_varII[[1]][,i]
for (i in 1:ncol(p_varII)) {
L_par[[i]] <- by(data = L_all[[1]],
INDICES = p_varII[[1]][,i],
FUN = as.matrix)$`1`
}
for (i in 1:ncol(p_varII[[1]])) {
L_par[[i]] <- by(data = L_all[[1]],
INDICES = p_varII[[1]][,i],
FUN = as.matrix)$`1`
}
L_par
by(data = L_all[[1]],
INDICES = p_varII[[1]][,i],
FUN = as.matrix)$`1`
for (i in 1:ncol(p_varII[[1]])) {
L_par[[i]] <- by(data = L_all[[1]],
INDICES = p_varII[[1]][,i],
FUN = as.matrix)$`1`
}
L_par[[i]]
for (j in 1:n_resp) {
for (i in 1:ncol(p_varII[[j]])) {
L_par[[i]] <- by(data = L_all[[j]],
INDICES = p_varII[[j]][,i],
FUN = as.matrix)$`1`
}
}
L_par
dim(L_par)
length(L_par)
L_par <- list()
L_par
length(L_par) <- n_resp
for (i in 1:ncol(p_varII[[1]])) {
L_par[[i]] <- by(data = L_all[[1]],
INDICES = p_varII[[1]][,i],
FUN = as.matrix)$`1`
}
L_par
p_varII
1:length(p_varII)
for (i in 1:ncol(p_varII[[1]])) {
L_par[[i]] <- by(data = L_all[[1]],
INDICES = p_varII[[1]][,i],
FUN = as.matrix)$`1`
}
L_par
L_par <- list()
for (i in 1:ncol(p_varII[[1]])) {
L_par[[i]] <- by(data = L_all[[1]],
INDICES = p_varII[[1]][,i],
FUN = as.matrix)$`1`
}
L_par
L_par <- list()
length(L_par) <- n_resp
L_par
for (i in 1:ncol(p_varII[[1]])) {
L_par[[1]][[i]] <- by(data = L_all[[1]],
INDICES = p_varII[[1]][,i],
FUN = as.matrix)$`1`
}
L_par
length(p_varII)
for (j in 1:length(p_varII)) {
for (i in 1:ncol(p_varII[[j]])) {
L_par[[j]][[i]] <- by(data = L_all[[j]],
INDICES = p_varII[[j]][,i],
FUN = as.matrix)$`1`
}
}
L_par
L_par
tabela <- list()
W <- vector() # Vetor para a estatística de teste
gl <- vector() # Vetor para graus de liberdade
p_val <- vector() # Vetor para p-valor
dim(L_par[[j]])
tabela <- list()
W <- vector() # Vetor para a estatística de teste
gl <- vector() # Vetor para graus de liberdade
p_val <- vector() # Vetor para p-valor
for (j in 1:n_resp) {
for (i in 1:dim(L_par[[j]])) {
W[i] <- as.numeric((t(L_par[[j]][[i]] %*% subset(beta, beta$Response == j)$Estimates)) %*% (solve(L_par[[j]][[i]]%*%vcov_betas[[j]]%*%t(L_par[[j]][[i]]))) %*% (L_par[[j]][[i]] %*% subset(beta, beta$Response == j)$Estimates))
gl[i] <- nrow(L_par[[j]][[i]])
p_val[i] <- pchisq(W[i], df = gl[i], lower.tail = FALSE)
}
tabela[[j]] <-
data.frame(Variável = c("Intercept",
attr(terms(fit_jointP$linear_pred[[j]]), "term.labels")),
GL = gl,
W = round(W, 3),
P_valor = round(p_val, 3))
}
dim(L_par[[1]])
L_par[[1]]
length(L_par[[1]]
)
for (j in 1:n_resp) {
for (i in 1:length(L_par[[1]])) {
W[i] <- as.numeric((t(L_par[[j]][[i]] %*% subset(beta, beta$Response == j)$Estimates)) %*% (solve(L_par[[j]][[i]]%*%vcov_betas[[j]]%*%t(L_par[[j]][[i]]))) %*% (L_par[[j]][[i]] %*% subset(beta, beta$Response == j)$Estimates))
gl[i] <- nrow(L_par[[j]][[i]])
p_val[i] <- pchisq(W[i], df = gl[i], lower.tail = FALSE)
}
tabela[[j]] <-
data.frame(Variável = c("Intercept",
attr(terms(fit_jointP$linear_pred[[j]]), "term.labels")),
GL = gl,
W = round(W, 3),
P_valor = round(p_val, 3))
}
for (j in 1:n_resp) {
for (i in 1:length(L_par[[j]])) {
W[i] <- as.numeric((t(L_par[[j]][[i]] %*% subset(beta, beta$Response == j)$Estimates)) %*% (solve(L_par[[j]][[i]]%*%vcov_betas[[j]]%*%t(L_par[[j]][[i]]))) %*% (L_par[[j]][[i]] %*% subset(beta, beta$Response == j)$Estimates))
gl[i] <- nrow(L_par[[j]][[i]])
p_val[i] <- pchisq(W[i], df = gl[i], lower.tail = FALSE)
}
tabela[[j]] <-
data.frame(Variável = c("Intercept",
attr(terms(fit_jointP$linear_pred[[j]]), "term.labels")),
GL = gl,
W = round(W, 3),
P_valor = round(p_val, 3))
}
tabela
tabela
anova(fit_jointP)
#----------------------------------------------------------------
library(mcglm)
dados <- read.csv2("dados_ovelhas.csv",
header = T,
sep = ";",
dec = ',')
dados2 <- dados[,c(1,2,3,4,
14,15,17,21,
7,9,10,11)]
dados2$momento <- ordered(dados2$tempo,
levels=c("Antes", "Durante", "Depois"))
form.ncorpo <- ncorpo ~ sessao
form.ncorpo2 <- ncorpo ~ sessao + tempo
form.ncorpo3 <- ncorpo ~ sessao + tempo + linhagem
form.ncorpo4 <- ncorpo ~ (sessao + tempo + linhagem)^2
Z0 <- mc_id(dados2) # Identidade
Z1 <- mc_mixed(~0 + factor(animal), data = dados2) # Animal
dados2$comb <- paste(dados2$animal, dados2$sessao)
Z2 <- mc_mixed(~0 + comb, data = dados2) # Animal Momento
fit_jointP <-
mcglm(linear_pred = c(form.ncorpo,
form.ncorpo2,
form.ncorpo3,
form.ncorpo4),
matrix_pred = list(c(Z0, Z1, Z2),
c(Z0, Z1, Z2),
c(Z0, Z1, Z2),
c(Z0, Z1, Z2)),
link = c("log","log","log","log"),
variance = c("poisson_tweedie",
"poisson_tweedie",
"poisson_tweedie",
"poisson_tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F, F, F, F),
data = dados2)
summary(fit_jointP)
# Vetor beta chapeu e indice de resposta
beta <- coef(fit_jointP, type = "beta")[,c(1, 4)]
# Número de betas por resposta
n_beta <- as.vector(table(beta$Response))
# Número de respostas
n_resp <- length(n_beta)
vcov_betas <- list()
vcov_betas[[1]] <- vcov(fit_jointP)[1:n_beta[1], 1:n_beta[1]]
for (i in 2:n_resp) {
vcov_betas[[i]] <-
vcov(fit_jointP)[(cumsum(n_beta)[i-1]+1):(cumsum(n_beta)[i]),
(cumsum(n_beta)[i-1]+1):(cumsum(n_beta)[i])]
}
p_var <- list()
for (i in 1:n_resp) {
p_var[[i]] <- attr(fit_jointP$list_X[[i]], "assign")
}
# Matriz L para todos os parâmetros (Hypothesis matrix), por resposta
L_all <- list()
for (i in 1:n_resp) {
L_all[[i]] <- diag(length(p_var[[i]]))
}
#----------------------------------------------------------------
expand <- list()
for (i in 1:length(L_all)) {
expand[[i]] <- by(data = L_all[[i]],
INDICES = p_var[[i]],
FUN = as.matrix)
}
beta_names <- list()
for (i in 1:length(L_all)) {
beta_names[[i]] <- fit_jointP$beta_names[[i]]
}
testes <- list()
for (i in 1:length(L_all)) {
testes[[i]] <- data.frame(beta_names = beta_names[[i]],
interacao = stringr::str_detect(beta_names[[i]], ':'))
}
for (i in 1:length(L_all)) {
for (j in 1:(length(expand[[i]]))) {
testes[[i]][,j+2] <- colSums(expand[[i]][[j]])
}
}
aux <- list()
length(aux) <- n_resp
for (k in 1:length(L_all)) {
for (i in 3:ncol(testes[[k]])) {
padrao <- as.vector(subset(testes[[k]], interacao == FALSE & testes[[k]][,i] == 1)$beta_names)
x <- matrix(nrow = nrow(testes[[k]]), ncol = length(padrao))
for (j in 1:nrow(testes[[k]])) {
x[j,] <- stringr::str_detect(testes[[k]]$beta_names[j],
pattern = padrao)
}
aux[[k]][[i]] <- list()
aux[[k]][[i]] <- ifelse(rowSums(x) == 1, 1, testes[[k]][,i])
as.vector(aux[[k]][[i]])
}
}
aux2 <- list()
for (i in 1:length(aux)) {
aux2[[i]] <- as.data.frame(do.call(cbind, aux[[i]]))
}
p_varII <- aux2
L_par <- list()
length(L_par) <- n_resp
for (j in 1:length(p_varII)) {
for (i in 1:ncol(p_varII[[j]])) {
L_par[[j]][[i]] <- by(data = L_all[[j]],
INDICES = p_varII[[j]][,i],
FUN = as.matrix)$`1`
}
}
tabela <- list()
W <- vector() # Vetor para a estatística de teste
gl <- vector() # Vetor para graus de liberdade
p_val <- vector() # Vetor para p-valor
for (j in 1:n_resp) {
for (i in 1:length(L_par[[j]])) {
W[i] <- as.numeric((t(L_par[[j]][[i]] %*% subset(beta, beta$Response == j)$Estimates)) %*% (solve(L_par[[j]][[i]]%*%vcov_betas[[j]]%*%t(L_par[[j]][[i]]))) %*% (L_par[[j]][[i]] %*% subset(beta, beta$Response == j)$Estimates))
gl[i] <- nrow(L_par[[j]][[i]])
p_val[i] <- pchisq(W[i], df = gl[i], lower.tail = FALSE)
}
tabela[[j]] <-
data.frame(Variável = c("Intercept",
attr(terms(fit_jointP$linear_pred[[j]]), "term.labels")),
GL = gl,
W = round(W, 3),
P_valor = round(p_val, 3))
}
tabela
anova(fit_jointP)
