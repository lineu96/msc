-----------------------------------------------
mc_anova_pc <- as.list(anova(fit_jointP))
mc_anova_pc <- as.list(anova(fit_jointP))
mc_anova_pc[[1]]
mc_anova_pc
anova(fit_jointP)
as.list(anova(fit_jointP))
#----------------------------------------------------------------
library(mcglm)
dados <- read.csv2("dados_ovelhas.csv",
header = T,
sep = ";",
dec = ',')
dados2 <- dados[,c(1,2,3,4,
14,15,17,21,
7,9,10,11)]
dados2$momento <- ordered(dados2$tempo,
levels=c("Antes", "Durante", "Depois"))
form.ncorpo <- ncorpo  ~ (sessao + tempo + linhagem)^2
form.ncorpo2 <- ncorpo ~ sessao + tempo + linhagem
form.ncorpo3 <- ncorpo ~ sessao + tempo
form.ncorpo4 <- ncorpo ~ sessao
Z0 <- mc_id(dados2) # Identidade
Z1 <- mc_mixed(~0 + factor(animal), data = dados2) # Animal
dados2$comb <- paste(dados2$animal, dados2$sessao)
Z2 <- mc_mixed(~0 + comb, data = dados2) # Animal Momento
fit_jointP <-
mcglm(linear_pred = c(form.ncorpo,
form.ncorpo2,
form.ncorpo3,
form.ncorpo4),
matrix_pred = list(c(Z0, Z1, Z2),
c(Z0, Z1, Z2),
c(Z0, Z1, Z2),
c(Z0, Z1, Z2)),
link = c("log","log","log","log"),
variance = c("poisson_tweedie",
"poisson_tweedie",
"poisson_tweedie",
"poisson_tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F, F, F, F),
data = dados2)
anova(fit_jointP)
-----------------------------------------------
mc_anova_pc <- as.list(anova(fit_jointP))
mc_anova_pc[[1]]
-----------------------------------------------
mc_anova_pc[[1]]
-----------------------------------------------
mc_anova_pc[[1]]
mc_anova_I(fit_jointP)[[1]]
mc_anova_II(fit_jointP)[[1]]
mc_anova_III(fit_jointP)[[1]]
####################################################################
# ANÁLISE DE VARIÂNCIA UNIVARIADA PARA MÚLTIPLAS RESPOSTAS NO MCGLM
# DO TIPO II
####################################################################
#----------------------------------------------------------------
library(mcglm)
#----------------------------------------------------------------
# LEITURA
dados <- read.csv2("dados_ovelhas.csv",
header = T,
sep = ";",
dec = ',')
dados2 <- dados[,c(1,2,3,4,
14,15,17,21,
7,9,10,11)]
dados2$momento <- ordered(dados2$tempo,
levels=c("Antes", "Durante", "Depois"))
#----------------------------------------------------------------
# PREDITOR
#form.ncorpo <- ncorpo ~ sessao + tempo + linhagem
#form.ncorpo2 <- ncorpo ~ sessao + tempo + linhagem
#form.ncorpo3 <- ncorpo ~ sessao + tempo + linhagem
form.ncorpo <- ncorpo  ~ (sessao + tempo + linhagem)^2
form.ncorpo2 <- ncorpo ~ sessao + tempo + linhagem
form.ncorpo3 <- ncorpo ~ sessao + tempo
form.ncorpo4 <- ncorpo ~ sessao
#----------------------------------------------------------------
# MATRIX LINEAR PREDICTOR
Z0 <- mc_id(dados2) # Identidade
Z1 <- mc_mixed(~0 + factor(animal), data = dados2) # Animal
dados2$comb <- paste(dados2$animal, dados2$sessao)
Z2 <- mc_mixed(~0 + comb, data = dados2) # Animal Momento
#----------------------------------------------------------------
# AJUSTE DO MODELO
fit_jointP <-
mcglm(linear_pred = c(form.ncorpo,
form.ncorpo2,
form.ncorpo3,
form.ncorpo4),
matrix_pred = list(c(Z0, Z1, Z2),
c(Z0, Z1, Z2),
c(Z0, Z1, Z2),
c(Z0, Z1, Z2)),
link = c("log","log","log","log"),
variance = c("poisson_tweedie",
"poisson_tweedie",
"poisson_tweedie",
"poisson_tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F, F, F, F),
data = dados2)
mc_anova_pc <- as.list(anova(fit_jointP))
mc_anova_pc[[1]]
mc_anova_III(fit_jointP)[[1]]
mc_anova_II(fit_jointP)[[1]]
mc_anova_pc[[2]]
mc_anova_pc[[2]]
mc_anova_I(fit_jointP)[[2]]
mc_anova_pc[[2]]
mc_anova_II(fit_jointP)[[2]]
mc_anova_III(fit_jointP)[[2]]
mc_anova_I(fit_jointP)[[2]]
# lendo os dados
dados <- readRDS('processos_parc.rds')
dados <- dados[, -c(2, 7)]
# ----------------------------------------------------------------------
# Ajustando o modelo
library(mcglm)
library(Matrix)
# preditores lineares considerando todas as covariaveis
imp <- improcedente ~ foro + tipo_vara  + adv_reu + empresa +
tipo_dano + log10(valor_acao) + serasa + terceiro + consumo +
gratuidade
proc <- procedente ~ foro + tipo_vara  + adv_reu + empresa +
tipo_dano + log10(valor_acao) + serasa + terceiro + consumo +
gratuidade
# a list of known matrices to be used on the matrix linear predictor
z0 <- mc_id(dados)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados)
mc_anova_pc <- as.list(anova(fit.binom))
mc_anova_pc <- as.list(anova(fit.binom))
mc_anova_pc[[1]]
mc_anova_II(fit.binom)[[1]]
mc_anova_III(fit.binom)[[1]]
mc_anova_II(fit.binom)[[1]] == mc_anova_III(fit.binom)[[1]]
mc_anova_pc[[2]]
mc_anova_II(fit.binom)[[2]]
mc_anova_III(fit.binom)[[2]]
mc_anova_II(fit.binom)[[2]] == mc_anova_III(fit.binom)[[2]]
mc_anova_pc[[2]]
mc_anova_II(fit.binom)[[2]]
mc_anova_I(fit.binom)[[2]]
# lendo os dados
dados <- readRDS('processos_parc.rds')
dados <- dados[, -c(2, 7)]
# ----------------------------------------------------------------------
# Ajustando o modelo
library(mcglm)
library(Matrix)
# preditores lineares considerando todas as covariaveis
imp <- improcedente ~ log10(valor_acao) + serasa + terceiro + consumo +
gratuidade
proc <- procedente ~ foro + tipo_vara  + adv_reu + empresa +
tipo_dano
# a list of known matrices to be used on the matrix linear predictor
z0 <- mc_id(dados)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados)
mc_anova_pc <- as.list(anova(fit.binom))
mc_anova_II(fit.binom)[[1]] == mc_anova_III(fit.binom)[[1]]
mc_anova_II(fit.binom)[[1]]
mc_anova_pc[[1]]
mc_anova_I(fit.binom)[[1]]
mc_anova_II(fit.binom)[[2]] == mc_anova_III(fit.binom)[[2]]
mc_anova_pc[[2]]
mc_anova_II(fit.binom)[[2]]
# lendo os dados
dados <- readRDS('processos_parc.rds')
dados <- dados[, -c(2, 7)]
# ----------------------------------------------------------------------
# Ajustando o modelo
library(mcglm)
library(Matrix)
# preditores lineares considerando todas as covariaveis
imp <- improcedente ~ (log10(valor_acao) + serasa + terceiro + consumo +
gratuidade)^2
proc <- procedente ~ (foro + tipo_vara  + adv_reu + empresa +
tipo_dano)^2
# a list of known matrices to be used on the matrix linear predictor
z0 <- mc_id(dados)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados)
# lendo os dados
dados <- readRDS('processos_parc.rds')
dados <- dados[, -c(2, 7)]
# ----------------------------------------------------------------------
# Ajustando o modelo
library(mcglm)
library(Matrix)
# preditores lineares considerando todas as covariaveis
imp <- improcedente ~ (log10(valor_acao) + serasa + terceiro)^2
proc <- procedente ~ (foro + tipo_vara)^2
# a list of known matrices to be used on the matrix linear predictor
z0 <- mc_id(dados)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados)
# preditores lineares considerando todas as covariaveis
imp <- improcedente ~ (log10(valor_acao) + terceiro)^2
proc <- procedente ~ (foro + tipo_vara)^2
# a list of known matrices to be used on the matrix linear predictor
z0 <- mc_id(dados)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados)
# preditores lineares considerando todas as covariaveis
imp <- improcedente ~ (log10(valor_acao) + serasa + terceiro + consumo +
gratuidade)^2
proc <- procedente ~ foro + tipo_vara
# a list of known matrices to be used on the matrix linear predictor
z0 <- mc_id(dados)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados)
mc_anova_pc <- as.list(anova(fit.binom))
mc_anova_pc[[2]]
mc_anova_III(fit.binom)[[2]]
mc_anova_II(fit.binom)[[2]]
mc_anova_I(fit.binom)[[2]]
mc_anova_pc[[1]]
mc_anova_pc[[1]]
mc_anova_II(fit.binom)[[1]]
mc_anova_III(fit.binom)[[1]]
mc_anova_I(fit.binom)[[1]]
# lendo os dados
dados <- readRDS('processos_parc.rds')
dados <- dados[, -c(2, 7)]
# ----------------------------------------------------------------------
# Ajustando o modelo
library(mcglm)
library(Matrix)
# preditores lineares considerando todas as covariaveis
imp <- improcedente ~ foro + tipo_vara
proc <- procedente ~ (log10(valor_acao) + serasa + terceiro + consumo +
gratuidade)^2
# a list of known matrices to be used on the matrix linear predictor
z0 <- mc_id(dados)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados)
mc_anova_pc <- as.list(anova(fit.binom))
mc_anova_pc[[1]]
mc_anova_III(fit.binom)[[1]]
mc_anova_II(fit.binom)[[1]]
mc_anova_I(fit.binom)[[1]]
mc_anova_pc[[2]]
mc_anova_III(fit.binom)[[2]]
mc_anova_II(fit.binom)[[2]]
#----------------------------------------------------------------
library(mcglm)
dados <- read.csv2("dados_ovelhas.csv",
header = T,
sep = ";",
dec = ',')
dados2 <- dados[,c(1,2,3,4,
14,15,17,21,
7,9,10,11)]
dados2$momento <- ordered(dados2$tempo,
levels=c("Antes", "Durante", "Depois"))
form.ncorpo <- ncorpo  ~ (sessao + tempo + linhagem)^2
form.ncorpo <- ncorpo  ~ (sessao + tempo + linhagem)
form.ncorpo2 <- ncabeca ~ (sessao + tempo + linhagem)
form.ncorpo3 <- norelha ~ (sessao + tempo + linhagem)
form.ncorpo4 <- nolho ~ (sessao + tempo + linhagem)
Z0 <- mc_id(dados2) # Identidade
Z1 <- mc_mixed(~0 + factor(animal), data = dados2) # Animal
dados2$comb <- paste(dados2$animal, dados2$sessao)
Z2 <- mc_mixed(~0 + comb, data = dados2) # Animal Momento
fit_jointP <-
mcglm(linear_pred = c(form.ncorpo,
form.ncorpo2,
form.ncorpo3,
form.ncorpo4),
matrix_pred = list(c(Z0, Z1, Z2),
c(Z0, Z1, Z2),
c(Z0, Z1, Z2),
c(Z0, Z1, Z2)),
link = c("log","log","log","log"),
variance = c("poisson_tweedie",
"poisson_tweedie",
"poisson_tweedie",
"poisson_tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F, F, F, F),
data = dados2)
mc_manova_I(fit_jointP)
mc_manova_II(fit_jointP)
mc_manova_III(fit_jointP)
mc_manova(fit_jointP)
mc_manova_I(fit_jointP)
mc_manova_II(fit_jointP)
mc_manova(fit_jointP)
mc_manova_I(fit_jointP)
mc_manova_II(fit_jointP)
mc_manova_III(fit_jointP)
form.ncorpo <- ncorpo  ~ (sessao + tempo + linhagem)^2
form.ncorpo2 <- ncabeca ~ (sessao + tempo + linhagem)^2
form.ncorpo3 <- norelha ~ (sessao + tempo + linhagem)^2
form.ncorpo4 <- nolho ~ (sessao + tempo + linhagem)^2
Z0 <- mc_id(dados2) # Identidade
Z1 <- mc_mixed(~0 + factor(animal), data = dados2) # Animal
dados2$comb <- paste(dados2$animal, dados2$sessao)
Z2 <- mc_mixed(~0 + comb, data = dados2) # Animal Momento
fit_jointP <-
mcglm(linear_pred = c(form.ncorpo,
form.ncorpo2,
form.ncorpo3,
form.ncorpo4),
matrix_pred = list(c(Z0, Z1, Z2),
c(Z0, Z1, Z2),
c(Z0, Z1, Z2),
c(Z0, Z1, Z2)),
link = c("log","log","log","log"),
variance = c("poisson_tweedie",
"poisson_tweedie",
"poisson_tweedie",
"poisson_tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 20,
tol = 1e-01),
power_fixed = c(F, F, F, F),
data = dados2)
mc_manova(fit_jointP)
mc_manova_III(fit_jointP)
mc_manova_II(fit_jointP)
mc_manova_I(fit_jointP)
# ----------------------------------------------------------------------
# Ajuste excluindo parcialmente e acordo como referencia
# ----------------------------------------------------------------------
# lendo os dados
dados <- readRDS('processos_parc.rds')
dados <- dados[, -c(2, 7)]
# ----------------------------------------------------------------------
# Ajustando o modelo
library(mcglm)
library(Matrix)
# preditores lineares considerando todas as covariaveis
imp <- improcedente ~ foro + tipo_vara  + adv_reu + empresa +
tipo_dano + log10(valor_acao) + serasa + terceiro + consumo +
gratuidade
proc <- procedente ~ foro + tipo_vara  + adv_reu + empresa +
tipo_dano + log10(valor_acao) + serasa + terceiro + consumo +
gratuidade
# a list of known matrices to be used on the matrix linear predictor
z0 <- mc_id(dados)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados)
mc_manova(fit_jointP)
mc_manova_II(fit_jointP)
mc_manova_III(fit_jointP)
mc_manova(fit.binom)
mc_manova_II(fit.binom) == mc_manova_III(fit.binom)
mc_manova(fit.binom)
mc_manova_II(fit.binom)
mc_manova_I(fit.binom)
proc <- procedente ~ (log10(valor_acao) + serasa + terceiro + consumo +
gratuidade)^2
# ----------------------------------------------------------------------
# Ajuste excluindo parcialmente e acordo como referencia
# ----------------------------------------------------------------------
# lendo os dados
dados <- readRDS('processos_parc.rds')
dados <- dados[, -c(2, 7)]
# ----------------------------------------------------------------------
# Ajustando o modelo
library(mcglm)
library(Matrix)
# preditores lineares considerando todas as covariaveis
imp <- (log10(valor_acao) + serasa + terceiro + consumo +
gratuidade)^2
proc <- procedente ~ (log10(valor_acao) + serasa + terceiro + consumo +
gratuidade)^2
# a list of known matrices to be used on the matrix linear predictor
z0 <- mc_id(dados)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados)
mc_manova_II(fit.binom) == mc_manova_III(fit.binom)
mc_manova(fit.binom)
# preditores lineares considerando todas as covariaveis
imp <- (log10(valor_acao) + serasa + terceiro + consumo +
gratuidade)^2
proc <- procedente ~ (log10(valor_acao) + serasa + terceiro + consumo +
gratuidade)^2
# a list of known matrices to be used on the matrix linear predictor
z0 <- mc_id(dados)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados)
fit.binom$beta_names[[1]]
fit.binom$beta_names[[1]] == fit.binom$beta_names[[2]]
# ----------------------------------------------------------------------
# Ajuste excluindo parcialmente e acordo como referencia
# ----------------------------------------------------------------------
# lendo os dados
dados <- readRDS('processos_parc.rds')
dados <- dados[, -c(2, 7)]
# ----------------------------------------------------------------------
# Ajustando o modelo
library(mcglm)
library(Matrix)
# preditores lineares considerando todas as covariaveis
imp <- improcedente ~ (log10(valor_acao) + serasa + terceiro + consumo +
gratuidade)^2
proc <- procedente ~ (log10(valor_acao) + serasa + terceiro + consumo +
gratuidade)^2
# a list of known matrices to be used on the matrix linear predictor
z0 <- mc_id(dados)
# Ajuste
fit.binom <- mcglm(linear_pred = c(imp, proc),
matrix_pred = list(z0, z0),
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = dados)
mc_manova_II(fit.binom) == mc_manova_III(fit.binom)
mc_manova(fit.binom)
mc_manova(fit.binom)
mc_manova_III(fit.binom)
mc_manova_II(fit.binom)
resp1
for(i in 1:n) {
paramslists <- list(
m1 = list(lambda = lambda1[i]),
m2 = list(lambda = lambda2[i]),
m3 = list(lambda = lambda3[i])
)
temp[[i]] <- NORTARA::genNORTARA(n = 1000, cor_matrix = cor_matrix,
invcdfnames = invcdfnames,
paramslists = paramslists)
print(i)
}
n = 1000,
beta1 = c(log(10), rep(-0.5, 4))
resp1 = qpois
resp2 = qpois
resp3 = qpois
n = 1000,
beta1 = c(log(10), rep(-0.5, 4))
n = 1000,
beta1 = c(log(10), rep(-0.5, 4))
beta2 = c(log(10), rep(-0.5, 4))
beta3 = c(log(10), rep(-0.5, 4))
beta3
invcdfnames <- c("resp1","resp2","resp3")
cor_matrix <- matrix(c(1.0 , 0.75,0.5,
0.75, 1.0 ,0.25,
0.5 , 0.25 ,1.0
), 3,3)
# Matriz de delineamento
trat1 <- gl(5, n/5)
trat2 <- gl(5, n/5)
X <- model.matrix(~ trat)
# Matriz de delineamento
trat1 <- gl(5, n/5)
n
n = 1000
# Matriz de delineamento
trat1 <- gl(5, n/5)
trat2 <- gl(5, n/5)
X <- model.matrix(~ trat)
X <- model.matrix(~ trat1+trat2)
X
gl(5, n/5)
