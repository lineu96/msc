geom_histogram(fill=1,alpha=0.5, col = 1)+
theme_bw()+
xlab('')+
ylab('')+
geom_vline(xintercept = 0, col = 2, lty = 2, lwd = 1)+
facet_wrap(~resp, scales = 'free') +
ggtitle('Resíduo Pearson')
g2 <- ggplot(data = res_pred, aes(x=raw))+
geom_histogram(fill=1,alpha=0.5, col = 1)+
theme_bw()+
xlab('')+
ylab('')+
geom_vline(xintercept = 0, col = 2, lty = 2, lwd = 1)+
facet_wrap(~resp, scales = 'free') +
ggtitle('Resíduo cru')
ggpubr::ggarrange(g1,g2, nrow = 2)
g1 <- ggplot(data = res_pred,
mapping = aes(sample = pearson)) +
geom_qq(alpha = 0.5) + geom_qq_line(col = 2)+
theme_bw() +
xlab('')+
ylab('Quantis amostrais') +
ggtitle('Resíduo Pearson') + facet_wrap(~resp, scales = 'free')
g2 <- ggplot(data = res_pred,
mapping = aes(sample = raw)) +
geom_qq(alpha = 0.5) + geom_qq_line(col = 2)+
theme_bw() +
xlab('Quantis teóricos')+
ylab('Quantis amostrais') +
ggtitle('Resíduo cru') + facet_wrap(~resp, scales = 'free')
ggpubr::ggarrange(g1,g2, nrow = 2)
g1 <- ggplot(data = res_pred, aes(y=pearson,x=preditos))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('')+
ylab('Resíduos') +
ggtitle('Resíduo Pearson') + facet_wrap(~resp, scales = 'free')
g2 <- ggplot(data = res_pred, aes(y=raw,x=preditos))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('Preditos')+
ylab('Resíduos') +
ggtitle('Resíduo cru') + facet_wrap(~resp, scales = 'free')
ggpubr::ggarrange(g1,g2, nrow = 2)
g1 <- ggplot(data = res_pred, aes(y=pearson,x=index))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('')+
ylab('Resíduos') +
ggtitle('Resíduo Pearson') + facet_wrap(~resp, scales = 'free')
g2 <- ggplot(data = res_pred, aes(y=raw,x=index))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('Preditos')+
ylab('Resíduos') +
ggtitle('Resíduo cru') + facet_wrap(~resp, scales = 'free')
ggpubr::ggarrange(g1,g2, nrow = 2)
1:nrow(dados)
(nrow(dados)+1)
nrow(res_pred)
dados$pred_min <- res_pred$preditos[1:nrow(dados)]
dados$pred_max <- res_pred$preditos[(nrow(dados)+1):nrow(res_pred)]
nrow(dados)
(nrow(dados)+1)
nrow(res_pred)
dados$pearson_min <- res_pred$pearson[1:nrow(dados)]
dados$pearson_max <- res_pred$pearson[(nrow(dados)+1):nrow(res_pred)]
dados$raw_min <- res_pred$raw[1:nrow(dados)]
dados$raw_max <- res_pred$raw[(nrow(dados)+1):nrow(res_pred)]
mal_ajustados <- subset(dados,
raw_min > 5.5  |
raw_max > 5.5  |
raw_min < -5.5|
raw_max < -5.5 |
pred_min > 40    |
pred_max > 40
)
nrow(mal_ajustados)
massa <- subset(dados,  !(dados$n %in% mal_ajustados$n))
analista <- subset(dados,(dados$n %in% mal_ajustados$n))
nrow(dados)
nrow(massa) + nrow(analista)
# Preditor
summary(massa)
form.min_lat <- min_lat ~ (lock + p0156 + p06 + p23 + p237 + p4 + p1# + p15 + p0
)
form.max_lat <- max_lat ~ (lock + p0156 + p06 + p23 + p237 + p4 + p1# + p15 + p0
)
Z0 <- mc_id(massa) # Identidade
fit2 <-
mcglm(linear_pred = c(form.min_lat,
form.max_lat),
matrix_pred = list(c(Z0),
c(Z0)),
link = c("log", "log"),
variance = c("poisson_tweedie", "poisson_tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.5,
max_iter = 60,
tol = 1e-8),
power_fixed = c(F,F),
data = massa)
matplot(fit$IterationCovariance, type = 'l', xlim = c(1,60))
matplot(fit$IterationCovariance, type = 'l', xlim = c(1,30))
summary(fit2)
coef(fit2, type = 'beta')
coef(fit2, type = 'tau')
coef(fit2, type = 'power')
## chol(vcov) inversa
chol_inv <- Matrix::chol(fit2$inv_C)
## Resíduos empilhados
residuos <- as.numeric(residuals(fit2, type = 'raw'))
## Produto matricial
pearson <- as.numeric(chol_inv%*%residuos)
## Preditos
preditos <- fit2$fitted
## Dataframe
res_pred <- data.frame(index = rep(1:nrow(massa),2),
resp = c(rep('min_lat', nrow(massa)),
rep('max_lat', nrow(massa))),
observado = c(massa$min_lat,
massa$max_lat),
preditos = preditos,
pearson = pearson,
raw = residuos
)
mean1 = MASS::fitdistr(res_pred$pearson[1:nrow(dados)],
densfun = "normal")$estimate[1]
sd1 = MASS::fitdistr(res_pred$pearson[1:nrow(dados)],
densfun = "normal")$estimate[2]
mean2 = MASS::fitdistr(res_pred$pearson[(nrow(dados)+1):nrow(res_pred)],
densfun = "normal")$estimate[1]
sd2 = MASS::fitdistr(res_pred$pearson[(nrow(dados)+1):nrow(res_pred)],
densfun = "normal")$estimate[2]
mean1
sd1
mean2
sd2
mean3 = MASS::fitdistr(res_pred$raw[1:nrow(dados)],
densfun = "normal")$estimate[1]
sd3 = MASS::fitdistr(res_pred$raw[1:nrow(dados)],
densfun = "normal")$estimate[2]
mean4 = MASS::fitdistr(res_pred$raw[(nrow(dados)+1):nrow(res_pred)],
densfun = "normal")$estimate[1]
sd4 = MASS::fitdistr(res_pred$raw[(nrow(dados)+1):nrow(res_pred)],
densfun = "normal")$estimate[2]
mean3
sd3
mean4
sd4
g1 <- ggplot(data = res_pred, aes(x=pearson))+
geom_histogram(fill=1,alpha=0.5, col = 1)+
theme_bw()+
xlab('')+
ylab('')+
geom_vline(xintercept = 0, col = 2, lty = 2, lwd = 1)+
facet_wrap(~resp, scales = 'free') +
ggtitle('Resíduo Pearson')
g2 <- ggplot(data = res_pred, aes(x=raw))+
geom_histogram(fill=1,alpha=0.5, col = 1)+
theme_bw()+
xlab('')+
ylab('')+
geom_vline(xintercept = 0, col = 2, lty = 2, lwd = 1)+
facet_wrap(~resp, scales = 'free') +
ggtitle('Resíduo cru')
ggpubr::ggarrange(g1,g2, nrow = 2)
g1 <- ggplot(data = res_pred,
mapping = aes(sample = pearson)) +
geom_qq(alpha = 0.5) + geom_qq_line(col = 2)+
theme_bw() +
xlab('')+
ylab('Quantis amostrais') +
ggtitle('Resíduo Pearson') + facet_wrap(~resp, scales = 'free')
g2 <- ggplot(data = res_pred,
mapping = aes(sample = raw)) +
geom_qq(alpha = 0.5) + geom_qq_line(col = 2)+
theme_bw() +
xlab('Quantis teóricos')+
ylab('Quantis amostrais') +
ggtitle('Resíduo cru') + facet_wrap(~resp, scales = 'free')
ggpubr::ggarrange(g1,g2, nrow = 2)
g1 <- ggplot(data = res_pred, aes(y=pearson,x=preditos))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('')+
ylab('Resíduos') +
ggtitle('Resíduo Pearson') + facet_wrap(~resp, scales = 'free')
g2 <- ggplot(data = res_pred, aes(y=raw,x=preditos))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('Preditos')+
ylab('Resíduos') +
ggtitle('Resíduo cru') + facet_wrap(~resp, scales = 'free')
ggpubr::ggarrange(g1,g2, nrow = 2)
g1 <- ggplot(data = res_pred, aes(y=pearson,x=index))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('')+
ylab('Resíduos') +
ggtitle('Resíduo Pearson') + facet_wrap(~resp, scales = 'free')
g2 <- ggplot(data = res_pred, aes(y=raw,x=index))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('Preditos')+
ylab('Resíduos') +
ggtitle('Resíduo cru') + facet_wrap(~resp, scales = 'free')
ggpubr::ggarrange(g1,g2, nrow = 2)
g1 <- ggplot(data = res_pred, aes(y=pearson,x=preditos))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('')+
ylab('Resíduos') +
ggtitle('Resíduo Pearson') + facet_wrap(~resp, scales = 'free')
g2 <- ggplot(data = res_pred, aes(y=raw,x=preditos))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('Preditos')+
ylab('Resíduos') +
ggtitle('Resíduo cru') + facet_wrap(~resp, scales = 'free')
ggpubr::ggarrange(g1,g2, nrow = 2)
fit2
# SAIDA DO MODELO
resumo <- summary(fit2)
round(resumo[[1]]$Regression, 4)
round(resumo[[2]]$Regression, 4)
betas_min <- round(resumo[[1]]$Regression, 4)
betas_max <- round(resumo[[2]]$Regression, 4)
round(resumo$`Resp.Variable 1`$Power,4)
round(resumo$`Resp.Variable 1`$tau,4)
round(resumo$`Resp.Variable 2`$Power,4)
round(resumo$`Resp.Variable 2`$tau,4)
confint(fit2)
beta_min <- data.frame(name = rownames(resumo$`Resp.Variable 1`$Regression),
exp_est = exp(round(resumo$`Resp.Variable 1`$Regression$Estimates,2)),
ic_min = as.vector(exp(confint(fit)[1:8,])[,1]),
ic_max = as.vector(exp(confint(fit)[1:8,])[,2]))
beta_max <- data.frame(name = rownames(resumo$`Resp.Variable 2`$Regression),
exp_est = exp(round(resumo$`Resp.Variable 2`$Regression$Estimates,2)),
ic_min = as.vector(exp(confint(fit)[9:16,])[,1]),
ic_max = as.vector(exp(confint(fit)[9:16,])[,2]))
beta_min[,2:4] <- round(beta_min[,2:4],2)
beta_max[,2:4] <- round(beta_max[,2:4],2)
beta_min
beta_max
## p0156
paste0('Para cada unidade de aumento no uso da porta ', beta_min$name[3],
' a media da latencia minima fica multiplicada por ', beta_min$exp_est[3],
' mantendo fixos os valores das demais variáveis. Com 95% de confiança o intervalo entre ',
beta_min$ic_min[3], ' e ', beta_min$ic_max[3], ' realmente contém o parâmetro.')
##p41
paste0('A media da latencia minima quando é usada a porta ', beta_min$name[7],
' é ', beta_min$exp_est[7], ' vezes a media de quando ela não é usada, mantendo fixos os valores das demais variáveis. Com 95% de confiança o intervalo entre ',
beta_min$ic_min[7], ' e ', beta_min$ic_max[7], ' realmente contém o parâmetro.')
# ANOVA
anova(fit)
# MANOVA
mc_manova(fit)
predito <- function(lock, p0156, p06,
p23, p237, p4,
p1){
betas <- data.frame(beta_name = c('intercept',
'lock', 'p0156',
'p06', 'p23',
'p237', 'p4', 'p1'),
estim_min = coef(fit, type = 'beta')$Estimates[1:8],
estim_max = coef(fit, type = 'beta')$Estimates[9:16])
min <- exp(
betas$estim_min[1] +           #intercept
betas$estim_min[2]  *  lock  + #lock
betas$estim_min[3]  *  p0156 + #p0156
betas$estim_min[4]  *  p06   + #p06
betas$estim_min[5]  *  p23   + #p23
betas$estim_min[6]  *  p237  + #p237
betas$estim_min[7]  *  p4    + #p4
betas$estim_min[8]  *  p1      #p1
)
max <- exp(
betas$estim_max[1] +            #intercept
betas$estim_max[2]  *  lock  +  #lock
betas$estim_max[3]  *  p0156 +  #p0156
betas$estim_max[4]  *  p06   +  #p06
betas$estim_max[5]  *  p23   +  #p23
betas$estim_max[6]  *  p237  +  #p237
betas$estim_max[7]  *  p4    +  #p4
betas$estim_max[8]  *  p1       #p1
)
out <- data.frame(min_lat = min,
max_lat = max)
return(out)
}
dados[sample(nrow(massa),1),c('lock',
'p0156',
'p06',
'p23',
'p237',
'p4',
'p1',
'min_lat',
'max_lat')]
predito(lock  =  0,
p0156 =  0,
p06   =  2,
p23   =  0,
p237  =  0,
p4    =  0,
p1    =  0)
dados[sample(nrow(massa),1),c('lock',
'p0156',
'p06',
'p23',
'p237',
'p4',
'p1',
'min_lat',
'max_lat')]
predito(lock  =  0,
p0156 =  1,
p06   =  0,
p23   =  1,
p237  =  1,
p4    =  1,
p1    =  0)
dados[sample(nrow(massa),1),c('lock',
'p0156',
'p06',
'p23',
'p237',
'p4',
'p1',
'min_lat',
'max_lat')]
predito(lock  =  0,
p0156 =  2,
p06   =  6,
p23   =  0,
p237  =  0,
p4    =  0,
p1    =  1)
dados[sample(nrow(massa),1),c('lock',
'p0156',
'p06',
'p23',
'p237',
'p4',
'p1',
'min_lat',
'max_lat')]
predito(lock  =  1,
p0156 =  4,
p06   =  2,
p23   =  2,
p237  =  0,
p4    =  1,
p1    =  0)
# SAIDA DO MODELO
resumo <- summary(fit2)
betas_min <- round(resumo[[1]]$Regression, 4)
betas_max <- round(resumo[[2]]$Regression, 4)
round(resumo$`Resp.Variable 1`$Power,4)
round(resumo$`Resp.Variable 1`$tau,4)
round(resumo$`Resp.Variable 2`$Power,4)
round(resumo$`Resp.Variable 2`$tau,4)
confint(fit2)
beta_min <- data.frame(name = rownames(resumo$`Resp.Variable 1`$Regression),
exp_est = exp(round(resumo$`Resp.Variable 1`$Regression$Estimates,2)),
ic_min = as.vector(exp(confint(fit2)[1:8,])[,1]),
ic_max = as.vector(exp(confint(fit2)[1:8,])[,2]))
beta_max <- data.frame(name = rownames(resumo$`Resp.Variable 2`$Regression),
exp_est = exp(round(resumo$`Resp.Variable 2`$Regression$Estimates,2)),
ic_min = as.vector(exp(confint(fit2)[9:16,])[,1]),
ic_max = as.vector(exp(confint(fit2)[9:16,])[,2]))
beta_min[,2:4] <- round(beta_min[,2:4],2)
beta_max[,2:4] <- round(beta_max[,2:4],2)
beta_min
beta_max
## p0156
paste0('Para cada unidade de aumento no uso da porta ', beta_min$name[3],
' a media da latencia minima fica multiplicada por ', beta_min$exp_est[3],
' mantendo fixos os valores das demais variáveis. Com 95% de confiança o intervalo entre ',
beta_min$ic_min[3], ' e ', beta_min$ic_max[3], ' realmente contém o parâmetro.')
##p41
paste0('A media da latencia minima quando é usada a porta ', beta_min$name[7],
' é ', beta_min$exp_est[7], ' vezes a media de quando ela não é usada, mantendo fixos os valores das demais variáveis. Com 95% de confiança o intervalo entre ',
beta_min$ic_min[7], ' e ', beta_min$ic_max[7], ' realmente contém o parâmetro.')
# ANOVA
anova(fit2)
# MANOVA
mc_manova(fit2)
predito <- function(lock, p0156, p06,
p23, p237, p4,
p1){
betas <- data.frame(beta_name = c('intercept',
'lock', 'p0156',
'p06', 'p23',
'p237', 'p4', 'p1'),
estim_min = coef(fit2, type = 'beta')$Estimates[1:8],
estim_max = coef(fit2, type = 'beta')$Estimates[9:16])
min <- exp(
betas$estim_min[1] +           #intercept
betas$estim_min[2]  *  lock  + #lock
betas$estim_min[3]  *  p0156 + #p0156
betas$estim_min[4]  *  p06   + #p06
betas$estim_min[5]  *  p23   + #p23
betas$estim_min[6]  *  p237  + #p237
betas$estim_min[7]  *  p4    + #p4
betas$estim_min[8]  *  p1      #p1
)
max <- exp(
betas$estim_max[1] +            #intercept
betas$estim_max[2]  *  lock  +  #lock
betas$estim_max[3]  *  p0156 +  #p0156
betas$estim_max[4]  *  p06   +  #p06
betas$estim_max[5]  *  p23   +  #p23
betas$estim_max[6]  *  p237  +  #p237
betas$estim_max[7]  *  p4    +  #p4
betas$estim_max[8]  *  p1       #p1
)
out <- data.frame(min_lat = min,
max_lat = max)
return(out)
}
dados[sample(nrow(massa),1),c('lock',
'p0156',
'p06',
'p23',
'p237',
'p4',
'p1',
'min_lat',
'max_lat')]
predito(lock  =  0,
p0156 =  1,
p06   =  0,
p23   =  0,
p237  =  0,
p4    =  0,
p1    =  0)
dados[sample(nrow(massa),1),c('lock',
'p0156',
'p06',
'p23',
'p237',
'p4',
'p1',
'min_lat',
'max_lat')]
predito(lock  =  0,
p0156 =  0,
p06   =  1,
p23   =  0,
p237  =  1,
p4    =  1,
p1    =  1)
dados[sample(nrow(massa),1),c('lock',
'p0156',
'p06',
'p23',
'p237',
'p4',
'p1',
'min_lat',
'max_lat')]
predito(lock  =  0,
p0156 =  1,
p06   =  0,
p23   =  0,
p237  =  0,
p4    =  0,
p1    =  1)
dados[sample(nrow(massa),1),c('lock',
'p0156',
'p06',
'p23',
'p237',
'p4',
'p1',
'min_lat',
'max_lat')]
predito(lock  =  0,
p0156 =  1,
p06   =  0,
p23   =  1,
p237  =  0,
p4    =  0,
p1    =  0)
dados[sample(nrow(massa),1),c('lock',
'p0156',
'p06',
'p23',
'p237',
'p4',
'p1',
'min_lat',
'max_lat')]
predito(lock  =  0,
p0156 =  0,
p06   =  7,
p23   =  3,
p237  =  0,
p4    =  0,
p1    =  1)
