theme(legend.title=element_blank(),
#axis.title.x=element_blank(),
#axis.text.x=element_blank(),
#axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())  + scale_color_discrete(guide = F)+
ggtitle('d')+
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")
#g <- ggarrange(g5, g6, g7, g8,
#               ncol = 4, nrow = 1)
#g
#---------------------------------------------------------------
x11()
ggpubr::ggarrange(g1,g2,g3,g4,
g5,g6,g7,g8,
nrow = 2, ncol = 4)
#---------------------------------------------------------------
#---------------------------------------------------------------
# DADOS
#---------------------------------------------------------------
# Diretório dos dados e biblioteca
setwd("~/msc/3_th_mcglm/3_analise_de_dados/1_ovelhas")
library(mcglm)
library(Matrix)
library(tidyverse)
library(ggpubr)
#---------------------------------------------------------------
# Leitura e tratamento dos dados
load("data_rbb.RData")
#---------------------------------------------------------------
# Exploratória
data_rbb2 <-
data_rbb %>%
gather(key = "response", value = "value", count, prop)
data_rbb2$moment <- ordered(data_rbb2$moment,
levels=c("Pre", "During", "Post"))
count_exp <- subset(data_rbb2, response == 'count')
prop_exp  <- subset(data_rbb2, response == 'prop')
## Count
g1 <- ggplot(count_exp, aes(x = value)) +
geom_histogram(col = 1, fill='white') +
xlab('Count') +
ylab('Frequency') +
theme_bw() +
scale_y_continuous(breaks = round(seq(0, 120, length.out = 3), 2)) +
ggtitle('a')
g2 <- ggplot(count_exp, aes(x = lineage, y = value)) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(fill='white') +
xlab('Lineage') +
ylab('Count') +
theme_bw() +
theme(legend.title = element_blank(),
axis.ticks.y = element_blank()) +
scale_color_discrete(guide = F)+
ggtitle('b')+
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")
g3 <- ggplot(count_exp, aes(x = session, y = value)) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(fill='white') +
xlab('Session') +
ylab('') +
theme_bw() +
theme(legend.title = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
scale_color_discrete(guide = F)+
ggtitle('c')+
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")
g4<-
ggplot(count_exp, aes(x=moment, y=value)) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(fill='white')+
xlab('Moment')+ ylab('') +
theme_bw()+
theme(legend.title=element_blank(),
#axis.title.x=element_blank(),
#axis.text.x=element_blank(),
#axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())  + scale_color_discrete(guide = F)+
ggtitle('d')+
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")
#g <- ggarrange(g1, g2, g3, g4,
#               ncol = 4, nrow = 1)
#g
## Prop
g5 <- ggplot(prop_exp, aes(x = value)) +
geom_histogram(col = 1, fill='white') +
xlab('Proportion') +
ylab('Frequency') +
theme_bw() +
scale_y_continuous(breaks = round(seq(0, 120, length.out = 3), 2))+
ggtitle('e')
g6 <- ggplot(prop_exp, aes(x = lineage, y = value)) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(fill='white') +
xlab('Lineage') +
ylab('Proportion') +
theme_bw() +
theme(legend.title = element_blank(),
axis.ticks.y = element_blank()) +
scale_color_discrete(guide = F)+
ggtitle('f')+
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")
g7 <- ggplot(prop_exp, aes(x = session, y = value)) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(fill='white') +
xlab('Session') +
ylab('') +
theme_bw() +
theme(legend.title = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
scale_color_discrete(guide = F)+
ggtitle('g')+
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")
g8<-
ggplot(prop_exp, aes(x=moment, y=value)) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(fill='white')+
xlab('Moment')+ ylab('') +
theme_bw()+
theme(legend.title=element_blank(),
#axis.title.x=element_blank(),
#axis.text.x=element_blank(),
#axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())  + scale_color_discrete(guide = F)+
ggtitle('h')+
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")
#g <- ggarrange(g5, g6, g7, g8,
#               ncol = 4, nrow = 1)
#g
#---------------------------------------------------------------
x11()
ggpubr::ggarrange(g1,g2,g3,g4,
g5,g6,g7,g8,
nrow = 2, ncol = 4)
#---------------------------------------------------------------
setwd("~/msc/3_th_mcglm/3_analise_de_dados/1_ovelhas")
library(mcglm)
library(Matrix)
library(tidyverse)
library(ggpubr)
load("data_rbb.RData")
data_rbb2 <-
data_rbb %>%
gather(key = "response", value = "value", count, prop)
data_rbb2$moment <- ordered(data_rbb2$moment,
levels=c("Pre", "During", "Post"))
count_exp <- subset(data_rbb2, response == 'count')
prop_exp  <- subset(data_rbb2, response == 'prop')
## Count
g1 <- ggplot(count_exp, aes(x = value)) +
geom_histogram(col = 1, fill='white') +
xlab('Count') +
ylab('Frequency') +
theme_bw() +
scale_y_continuous(breaks = round(seq(0, 120, length.out = 3), 2)) +
ggtitle('a')
g2 <- ggplot(count_exp, aes(x = lineage, y = value)) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(fill='white') +
xlab('Lineage') +
ylab('Count') +
theme_bw() +
theme(legend.title = element_blank(),
axis.ticks.y = element_blank()) +
scale_color_discrete(guide = F)+
ggtitle('b')+
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")
g3 <- ggplot(count_exp, aes(x = session, y = value)) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(fill='white') +
xlab('Session') +
ylab('') +
theme_bw() +
theme(legend.title = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
scale_color_discrete(guide = F)+
ggtitle('c')+
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")
g4<-
ggplot(count_exp, aes(x=moment, y=value)) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(fill='white')+
xlab('Moment')+ ylab('') +
theme_bw()+
theme(legend.title=element_blank(),
#axis.title.x=element_blank(),
#axis.text.x=element_blank(),
#axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())  + scale_color_discrete(guide = F)+
ggtitle('d')+
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")
g5 <- ggplot(prop_exp, aes(x = value)) +
geom_histogram(col = 1, fill='white') +
xlab('Proportion') +
ylab('Frequency') +
theme_bw() +
scale_y_continuous(breaks = round(seq(0, 120, length.out = 3), 2))+
ggtitle('e')
g6 <- ggplot(prop_exp, aes(x = lineage, y = value)) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(fill='white') +
xlab('Lineage') +
ylab('Proportion') +
theme_bw() +
theme(legend.title = element_blank(),
axis.ticks.y = element_blank()) +
scale_color_discrete(guide = F)+
ggtitle('f')+
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")
g7 <- ggplot(prop_exp, aes(x = session, y = value)) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(fill='white') +
xlab('Session') +
ylab('') +
theme_bw() +
theme(legend.title = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
scale_color_discrete(guide = F)+
ggtitle('g')+
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")
g8<-
ggplot(prop_exp, aes(x=moment, y=value)) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(fill='white')+
xlab('Moment')+ ylab('') +
theme_bw()+
theme(legend.title=element_blank(),
#axis.title.x=element_blank(),
#axis.text.x=element_blank(),
#axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())  + scale_color_discrete(guide = F)+
ggtitle('h')+
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")
#---------------------------------------------------------------
x11()
ggpubr::ggarrange(g1,g2,g3,g4,
g5,g6,g7,g8,
nrow = 2, ncol = 4)
form.count <- count ~ (session + moment + lineage)^2
form.prop <- prop ~ (session + moment + lineage)^2
Z0 <- mc_id(data_rbb) # Identidade
Z1 <- mc_mixed(~0 + factor(animal), data = data_rbb) # Animal
data_rbb$comb <- paste(data_rbb$animal, data_rbb$session)
Z2 <- mc_mixed(~0 + comb, data = data_rbb) # Animal Sessão
fit <-
mcglm(linear_pred = c(form.count, form.prop),
matrix_pred = list(c(Z0, Z1, Z2),
c(Z0, Z1, Z2)),
link = c("log", "logit"),
variance = c("poisson_tweedie", "binomialP"),
control_algorithm = list(verbose = T,
tuning = 0.5,
max_iter = 80,
tol = 1e-04),
power_fixed = c(F,F),
data = data_rbb)
fit <-
mcglm(linear_pred = c(form.count, form.prop),
matrix_pred = list(c(Z0, Z1, Z2),
c(Z0, Z1, Z2)),
link = c("log", "logit"),
variance = c("poisson_tweedie", "binomialP"),
control_algorithm = list(verbose = T,
tuning = 0.5,
max_iter = 80,
tol = 1e-08),
power_fixed = c(F,F),
data = data_rbb)
matplot(fit$IterationCovariance, type = 'l', xlim = c(1,70))
x11()
summary(fit)
matplot(fit$IterationCovariance, type = 'l', xlim = c(1,85))
summary(fit)
coef(fit, type = 'beta')
coef(fit, type = 'tau')
coef(fit, type = 'power')
## chol(vcov) inversa
chol_inv <- Matrix::chol(fit$inv_C)
## Resíduos empilhados
residuos <- as.numeric(residuals(fit, type = 'raw'))
## Produto matricial
pearson <- as.numeric(chol_inv%*%residuos)
## Preditos
preditos <- fit$fitted
## Dataframe
res_pred <- data.frame(index = rep(1:nrow(data_rbb),2),
resp = c(rep('count', nrow(data_rbb)),
rep('prop', nrow(data_rbb))),
observado = c(data_rbb$count,
data_rbb$prop),
preditos = preditos,
pearson = pearson,
raw = residuos
)
mean1 = MASS::fitdistr(res_pred$pearson[1:180],
densfun = "normal")$estimate[1]
sd1 = MASS::fitdistr(res_pred$pearson[1:180],
densfun = "normal")$estimate[2]
mean2 = MASS::fitdistr(res_pred$pearson[181:360],
densfun = "normal")$estimate[1]
sd2 = MASS::fitdistr(res_pred$pearson[181:360],
densfun = "normal")$estimate[2]
mean1
sd1
mean2
sd2
mean3 = MASS::fitdistr(res_pred$raw[1:180],
densfun = "normal")$estimate[1]
sd3 = MASS::fitdistr(res_pred$raw[1:180],
densfun = "normal")$estimate[2]
mean4 = MASS::fitdistr(res_pred$raw[181:360],
densfun = "normal")$estimate[1]
sd4 = MASS::fitdistr(res_pred$raw[181:360],
densfun = "normal")$estimate[2]
mean3
sd3
mean4
sd4
g1 <- ggplot(data = res_pred, aes(x=pearson))+
geom_histogram(fill=1,alpha=0.5, col = 1)+
theme_bw()+
xlab('')+
ylab('')+
geom_vline(xintercept = 0, col = 2, lty = 2, lwd = 1)+
facet_wrap(~resp, scales = 'free') +
ggtitle('Resíduo Pearson')
g2 <- ggplot(data = res_pred, aes(x=raw))+
geom_histogram(fill=1,alpha=0.5, col = 1)+
theme_bw()+
xlab('')+
ylab('')+
geom_vline(xintercept = 0, col = 2, lty = 2, lwd = 1)+
facet_wrap(~resp, scales = 'free') +
ggtitle('Resíduo cru')
ggpubr::ggarrange(g1,g2, nrow = 2)
g1 <- ggplot(data = res_pred,
mapping = aes(sample = pearson)) +
geom_qq(alpha = 0.5) + geom_qq_line(col = 2)+
theme_bw() +
xlab('')+
ylab('Quantis amostrais') +
ggtitle('Resíduo Pearson') + facet_wrap(~resp, scales = 'free')
g2 <- ggplot(data = res_pred,
mapping = aes(sample = raw)) +
geom_qq(alpha = 0.5) + geom_qq_line(col = 2)+
theme_bw() +
xlab('Quantis teóricos')+
ylab('Quantis amostrais') +
ggtitle('Resíduo cru') + facet_wrap(~resp, scales = 'free')
ggpubr::ggarrange(g1,g2, nrow = 2)
g1 <- ggplot(data = res_pred, aes(y=pearson,x=preditos))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('')+
ylab('Resíduos') +
ggtitle('Resíduo Pearson') + facet_wrap(~resp, scales = 'free')
g2 <- ggplot(data = res_pred, aes(y=raw,x=preditos))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('Preditos')+
ylab('Resíduos') +
ggtitle('Resíduo cru') + facet_wrap(~resp, scales = 'free')
ggpubr::ggarrange(g1,g2, nrow = 2)
g1 <- ggplot(data = res_pred, aes(y=pearson,x=index))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('')+
ylab('Resíduos') +
ggtitle('Resíduo Pearson') + facet_wrap(~resp, scales = 'free')
g2 <- ggplot(data = res_pred, aes(y=raw,x=index))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('Preditos')+
ylab('Resíduos') +
ggtitle('Resíduo cru') + facet_wrap(~resp, scales = 'free')
ggpubr::ggarrange(g1,g2, nrow = 2)
data_rbb$n <- 1:nrow(data_rbb)
data_rbb$pred_count <- res_pred$preditos[1:nrow(data_rbb)]
data_rbb$pred_prop <- res_pred$preditos[(nrow(data_rbb)+1):nrow(res_pred)]
data_rbb$pearson_count <- res_pred$pearson[1:nrow(data_rbb)]
data_rbb$pearson_prop <- res_pred$pearson[(nrow(data_rbb)+1):nrow(res_pred)]
data_rbb$raw_count <- res_pred$raw[1:nrow(data_rbb)]
data_rbb$raw_prop <- res_pred$raw[(nrow(data_rbb)+1):nrow(res_pred)]
mal_ajustados <- subset(data_rbb,
pearson_count   >  2    |
pearson_count < -2    |
pearson_prop  >  2  |
pearson_prop  < -2
)
nrow(mal_ajustados)
mal_ajustados[,c('count', 'pred_count', 'pearson_count',
'prop', 'pred_prop', 'pearson_prop')]
data_rbb2 <- subset(data_rbb,  !(data_rbb$n %in% mal_ajustados$n))
analista <- subset(data_rbb,(data_rbb$n %in% mal_ajustados$n))
nrow(data_rbb2)
nrow(analista)
# SAIDA DO MODELO
resumo <- summary(fit)
betas_count <- round(resumo[[1]]$Regression, 4)
betas_prop <- round(resumo[[2]]$Regression, 4)
betas_count
round(resumo$`Resp.Variable 1`$Power,4)
round(resumo$`Resp.Variable 1`$tau,4)
round(resumo$`Resp.Variable 2`$Power,4)
round(resumo$`Resp.Variable 2`$tau,4)
confint(fit2)
confint(fit)
beta_count <- data.frame(name = rownames(resumo$`Resp.Variable 1`$Regression),
exp_est = exp(round(resumo$`Resp.Variable 1`$Regression$Estimates,2)),
ic_min = as.vector(exp(confint(fit)[1:14,])[,1]),
ic_max = as.vector(exp(confint(fit)[1:14,])[,2]))
beta_count <- data.frame(name = rownames(resumo$`Resp.Variable 1`$Regression),
exp_est = exp(round(resumo$`Resp.Variable 1`$Regression$Estimates,2)),
ic_min = as.vector(exp(confint(fit)[1:14,])[,1]),
ic_max = as.vector(exp(confint(fit)[1:14,])[,2]))
beta_prop <- data.frame(name = rownames(resumo$`Resp.Variable 2`$Regression),
exp_est = exp(round(resumo$`Resp.Variable 2`$Regression$Estimates,2)),
ic_min = as.vector(exp(confint(fit)[15:28,])[,1]),
ic_max = as.vector(exp(confint(fit)[15:28,])[,2]))
beta_count[,2:4] <- round(beta_count[,2:4],2)
beta_prop[,2:4] <- round(beta_prop[,2:4],2)
beta_count
beta_prop
betas_prop
betas_prop
