dados3 <- dados3[,c(1,2,3,4,5,6,7,8,18,19)]
dados3$chave <- 1:nrow(dados3)
dados3 <- left_join(dados3, imc)
dados3 <- left_join(dados3, yale)
dados3 <- left_join(dados3, ecap)
dados3$momento <- as.factor(dados3$momento)
levels(dados3$momento) <- c('Pré op.','90 dias','365 dias')
dados3 <- dados3[,-c(12,14,16)]
dados4 <- na.omit(dados3)
# nrow(dados3)
pred_yale <- yale ~ momento + grupo + idade + altura +
peso + imc + momento:grupo
pred_ecap <- ecap ~ momento + grupo + idade + altura +
peso + imc + momento:grupo
Z0 <- mc_id(dados4) # Identidade
Z1 <- mc_mixed(~0 + factor(id), data = dados4)
Z1
plot(Z1)
as.matrix(Z1)
str(Z1)
Z0 <- mc_id(dados4) # Identidade
Z1 <- mc_mixed(~0 + factor(id), data = dados4) # individuo
fit <-
mcglm(linear_pred = c(pred_yale,
pred_ecap),
matrix_pred = list(c(Z0,Z1),
c(Z0,Z1)),
link = c("log", "log"),
variance = c("poisson_tweedie", "poisson_tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 250,
tol = 1e-8),
power_fixed = c(F,F),
data = dados4)
fit <-
mcglm(linear_pred = c(pred_yale,
pred_ecap),
matrix_pred = list(c(Z0,Z1),
c(Z0,Z1)),
link = c("log", "log"),
variance = c("poisson_tweedie", "poisson_tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 250,
tol = 1e-4),
power_fixed = c(F,F),
data = dados4)
summary(fit)
pred_yale <- yale ~ momento + grupo + momento:grupo
pred_ecap <- ecap ~ momento + grupo + momento:grupo
Z0 <- mc_id(dados4) # Identidade
Z1 <- mc_mixed(~0 + factor(id), data = dados4) # individuo
fit <-
mcglm(linear_pred = c(pred_yale,
pred_ecap),
matrix_pred = list(c(Z0,Z1),
c(Z0,Z1)),
link = c("log", "log"),
variance = c("poisson_tweedie", "poisson_tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 250,
tol = 1e-4),
power_fixed = c(F,F),
data = dados4)
summary(fit)
matplot(fit$IterationCovariance, type = 'l', xlim = c(1,160))
summary(fit)
matplot(fit$IterationCovariance, type = 'l', xlim = c(1,160))
summary(fit)
coef(fit, type = 'beta')
coef(fit, type = 'tau')
coef(fit, type = 'power')
## chol(vcov) inversa
chol_inv <- Matrix::chol(fit$inv_C)
## Resíduos empilhados
residuos <- as.numeric(residuals(fit, type = 'raw'))
## Produto matricial
pearson <- as.numeric(chol_inv%*%residuos)
## Preditos
preditos <- fit$fitted
## Dataframe
res_pred <- data.frame(index = rep(1:nrow(dados4),2),
resp = c(rep('yale', nrow(dados4)),
rep('ecap', nrow(dados4))),
observado = c(dados4$yale,
dados4$ecap),
preditos = preditos,
pearson = pearson,
raw = residuos
)
mean1 = MASS::fitdistr(res_pred$pearson[1:nrow(dados4)],
densfun = "normal")$estimate[1]
sd1 = MASS::fitdistr(res_pred$pearson[1:nrow(dados4)],
densfun = "normal")$estimate[2]
mean2 = MASS::fitdistr(res_pred$pearson[(nrow(dados4)+1):nrow(res_pred)],
densfun = "normal")$estimate[1]
sd2 = MASS::fitdistr(res_pred$pearson[(nrow(dados4)+1):nrow(res_pred)],
densfun = "normal")$estimate[2]
mean1
sd1
mean2
sd2
mean3 = MASS::fitdistr(res_pred$raw[1:nrow(dados4)],
densfun = "normal")$estimate[1]
sd3 = MASS::fitdistr(res_pred$raw[1:nrow(dados4)],
densfun = "normal")$estimate[2]
mean4 = MASS::fitdistr(res_pred$raw[(nrow(dados4)+1):nrow(res_pred)],
densfun = "normal")$estimate[1]
sd4 = MASS::fitdistr(res_pred$raw[(nrow(dados4)+1):nrow(res_pred)],
densfun = "normal")$estimate[2]
mean3
sd3
mean4
sd4
g1 <- ggplot(data = res_pred, aes(x=pearson))+
geom_histogram(fill=1,alpha=0.5, col = 1)+
theme_bw()+
xlab('')+
ylab('')+
geom_vline(xintercept = 0, col = 2, lty = 2, lwd = 1)+
facet_wrap(~resp, scales = 'free') +
ggtitle('Resíduo Pearson')
g2 <- ggplot(data = res_pred, aes(x=raw))+
geom_histogram(fill=1,alpha=0.5, col = 1)+
theme_bw()+
xlab('')+
ylab('')+
geom_vline(xintercept = 0, col = 2, lty = 2, lwd = 1)+
facet_wrap(~resp, scales = 'free') +
ggtitle('Resíduo cru')
ggpubr::ggarrange(g1,g2, nrow = 2)
g1 <- ggplot(data = res_pred,
mapping = aes(sample = pearson)) +
geom_qq(alpha = 0.5) + geom_qq_line(col = 2)+
theme_bw() +
xlab('')+
ylab('Quantis amostrais') +
ggtitle('Resíduo Pearson') + facet_wrap(~resp, scales = 'free')
g2 <- ggplot(data = res_pred,
mapping = aes(sample = raw)) +
geom_qq(alpha = 0.5) + geom_qq_line(col = 2)+
theme_bw() +
xlab('Quantis teóricos')+
ylab('Quantis amostrais') +
ggtitle('Resíduo cru') + facet_wrap(~resp, scales = 'free')
ggpubr::ggarrange(g1,g2, nrow = 2)
g1 <- ggplot(data = res_pred, aes(y=pearson,x=preditos))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('')+
ylab('Resíduos') +
ggtitle('Resíduo Pearson') + facet_wrap(~resp, scales = 'free')
g2 <- ggplot(data = res_pred, aes(y=raw,x=preditos))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('Preditos')+
ylab('Resíduos') +
ggtitle('Resíduo cru') + facet_wrap(~resp, scales = 'free')
ggpubr::ggarrange(g1,g2, nrow = 2)
g1 <- ggplot(data = res_pred, aes(y=pearson,x=index))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('')+
ylab('Resíduos') +
ggtitle('Resíduo Pearson') + facet_wrap(~resp, scales = 'free')
g2 <- ggplot(data = res_pred, aes(y=raw,x=index))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('Preditos')+
ylab('Resíduos') +
ggtitle('Resíduo cru') + facet_wrap(~resp, scales = 'free')
ggpubr::ggarrange(g1,g2, nrow = 2)
dados4$pred_yale <- res_pred$preditos[1:nrow(dados4)]
dados4$pred_ecap <- res_pred$preditos[(nrow(dados4)+1):nrow(res_pred)]
dados4$pearson_yale <- res_pred$pearson[1:nrow(dados4)]
dados4$pearson_ecap <- res_pred$pearson[(nrow(dados4)+1):nrow(res_pred)]
dados4$raw_yale <- res_pred$raw[1:nrow(dados4)]
dados4$raw_ecap <- res_pred$raw[(nrow(dados4)+1):nrow(res_pred)]
mal_ajustados <- subset(dados4,
pearson_yale   >  2    |
pearson_yale < -2    |
pearson_ecap  >  2 |
pearson_ecap  < -2
)
nrow(mal_ajustados)
mal_ajustados
# SAIDA DO MODELO
resumo <- summary(fit)
betas_yale <- round(resumo[[1]]$Regression, 4)
betas_ecap <- round(resumo[[2]]$Regression, 4)
betas_yale
betas_ecap
betas_yale
betas_ecap
round(resumo$`Resp.Variable 1`$Power,4)
round(resumo$`Resp.Variable 1`$tau,4)
round(resumo$`Resp.Variable 2`$Power,4)
round(resumo$`Resp.Variable 2`$tau,4)
confint(fit2)
confint(fit)
confint(fit2)[1:6,]
confint(fit)[1:6,]
beta_yale <- data.frame(name = rownames(resumo$`Resp.Variable 1`$Regression),
exp_est = exp(round(resumo$`Resp.Variable 1`$Regression$Estimates,2)),
ic_min = as.vector(exp(confint(fit)[1:6,])[,1]),
ic_max = as.vector(exp(confint(fit)[1:6,])[,2]))
beta_yale
beta_max <- data.frame(name = rownames(resumo$`Resp.Variable 2`$Regression),
exp_est = exp(round(resumo$`Resp.Variable 2`$Regression$Estimates,2)),
ic_min = as.vector(exp(confint(fit)[7:12,])[,1]),
ic_max = as.vector(exp(confint(fit)[7:12,])[,2]))
beta_ecap <- data.frame(name = rownames(resumo$`Resp.Variable 2`$Regression),
exp_est = exp(round(resumo$`Resp.Variable 2`$Regression$Estimates,2)),
ic_min = as.vector(exp(confint(fit)[7:12,])[,1]),
ic_max = as.vector(exp(confint(fit)[7:12,])[,2]))
round(beta_yale[,2:4],2)
beta_yale[,2:4] <- round(beta_yale[,2:4],2)
beta_ecap[,2:4] <- round(beta_ecap[,2:4],2)
beta_yale
beta_ecap
table4 <- expand.grid(Grupo=levels(dados4$grupo),
Momento=levels(dados4$momento))
table4
attach(table4)
beta
beta_yale
beta2_yale
betas_yale
table4 <- expand.grid(Grupo=levels(dados4$grupo),
Momento=levels(dados4$momento))
attach(table4)
detach(table4)
detach(table4)
table4 <- expand.grid(Grupo=levels(dados4$grupo),
Momento=levels(dados4$momento))
attach(table4)
table4$lin_pred_yale <-
betas_yale$Estimate[1] +
betas_yale$Estimate[2]*I(Momento==levels(dados4$momento)[2])+
betas_yale$Estimate[3]*I(Momento==levels(dados4$momento)[3])+
betas_yale$Estimate[4]*I(Grupo==levels(dados4$grupo)[2])+
betas_yale$Estimate[5]*I(Momento==levels(dados4$momento)[2])*I(Grupo==levels(dados4$grupo)[2])+
betas_yale$Estimate[6]*I(Momento==levels(dados4$momento)[3])*I(Grupo==levels(dados4$grupo)[2])
table4$mean_pred_yale <- round(exp(table4$lin_pred_yale),2)
table4$lin_pred_yale <- round(table4$lin_pred_yale,2)
betas_ecap
table4$lin_pred_ecap <-
betas_ecap$Estimate[1] +
betas_ecap$Estimate[2]*I(Momento==levels(dados4$momento)[2])+
betas_ecap$Estimate[3]*I(Momento==levels(dados4$momento)[3])+
betas_ecap$Estimate[4]*I(Grupo==levels(dados4$grupo)[2])+
betas_ecap$Estimate[5]*I(Momento==levels(dados4$momento)[2])*I(Grupo==levels(dados4$grupo)[2])+
betas_ecap$Estimate[6]*I(Momento==levels(dados4$momento)[3])*I(Grupo==levels(dados4$grupo)[2])
table4$mean_pred_ecap <- round(exp(table4$lin_pred_ecap),2)
table4$lin_pred_ecap <- round(table4$lin_pred_ecap,2)
detach(table4)
tabela <- table4[,c(1,2,4,6)]
names(tabela) <- c('Grupo', 'Momento', 'Yale predito', 'Ecap predito')
tabela
tabela <- table4[,c(1,2,4,6)]
names(tabela) <- c('Grupo', 'Momento', 'Yale predito', 'Ecap predito')
table4_plot <- data.frame(Grupo = rep(table4$Grupo,2),
Momento = rep(table4$Momento,2),
Métrica = c(rep('Yale',6),
rep('Ecap',6)),
Predito = c(table4$mean_pred_yale, table4$mean_pred_ecap))
ggplot(table4_plot, aes(x=Momento,
y=Predito,
group = Grupo))+
theme_bw() +
geom_line(aes(group=Grupo, linetype=Grupo)) +
theme(legend.position = 'top') +
#labs(title = "Ecap")+
xlab('Experimental moment') +
ylab('Estimate')+ geom_point() +
facet_wrap(~Métrica, scales = 'free')
library(mcglm)
library(Matrix)
library(tidyverse)
dados <- read.csv2("~/Dropbox/Aulas-Acessorias/10 Ligia Carlos/0 dados/dados.csv", sep = ',')
dados2 <- na.omit(dados)
imc <- dados %>% gather(key = 'momento_imc',
value = 'imc', imc1:imc4)
imc <- imc[,c(1,18,19)]
imc$chave <- 1:nrow(imc)
yale <- dados %>% gather(key = 'momento_yale',
value = 'yale', yale1:yale4)
yale <- yale[,c(1,18,19)]
yale$chave <- 1:nrow(yale)
ecap <- dados %>% gather(key = 'momento_ecap',
value = 'ecap', ecap1:ecap4)
ecap <- ecap[,c(1,18,19)]
ecap$chave <- 1:nrow(ecap)
dados3 <- dados %>% gather(key = 'momento',
value = 'peso', peso1:peso4)
dados3 <- dados3[,c(1,2,3,4,5,6,7,8,18,19)]
dados3$chave <- 1:nrow(dados3)
dados3 <- left_join(dados3, imc)
dados3 <- left_join(dados3, yale)
dados3 <- left_join(dados3, ecap)
dados3$momento <- as.factor(dados3$momento)
levels(dados3$momento) <- c('Pré op.','90 dias','365 dias')
dados3 <- dados3[,-c(12,14,16)]
dados4 <- na.omit(dados3)
# nrow(dados3)
pred_yale <- yale ~ momento + grupo + momento:grupo
pred_ecap <- ecap ~ momento + grupo + momento:grupo
Z0 <- mc_id(dados4) # Identidade
Z1 <- mc_mixed(~0 + factor(id), data = dados4) # individuo
fit <-
mcglm(linear_pred = c(pred_yale,
pred_ecap),
matrix_pred = list(c(Z0,Z1),
c(Z0,Z1)),
link = c("log", "log"),
variance = c("poisson_tweedie", "poisson_tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.1,
max_iter = 250,
tol = 1e-4),
power_fixed = c(F,F),
data = dados4)
matplot(fit$IterationCovariance, type = 'l', xlim = c(1,160))
summary(fit)
coef(fit, type = 'beta')
coef(fit, type = 'tau')
coef(fit, type = 'power')
## chol(vcov) inversa
chol_inv <- Matrix::chol(fit$inv_C)
## Resíduos empilhados
residuos <- as.numeric(residuals(fit, type = 'raw'))
## Produto matricial
pearson <- as.numeric(chol_inv%*%residuos)
## Preditos
preditos <- fit$fitted
## Dataframe
res_pred <- data.frame(index = rep(1:nrow(dados4),2),
resp = c(rep('yale', nrow(dados4)),
rep('ecap', nrow(dados4))),
observado = c(dados4$yale,
dados4$ecap),
preditos = preditos,
pearson = pearson,
raw = residuos
)
mean1 = MASS::fitdistr(res_pred$pearson[1:nrow(dados4)],
densfun = "normal")$estimate[1]
sd1 = MASS::fitdistr(res_pred$pearson[1:nrow(dados4)],
densfun = "normal")$estimate[2]
mean2 = MASS::fitdistr(res_pred$pearson[(nrow(dados4)+1):nrow(res_pred)],
densfun = "normal")$estimate[1]
sd2 = MASS::fitdistr(res_pred$pearson[(nrow(dados4)+1):nrow(res_pred)],
densfun = "normal")$estimate[2]
mean1
sd1
mean2
sd2
mean3 = MASS::fitdistr(res_pred$raw[1:nrow(dados4)],
densfun = "normal")$estimate[1]
sd3 = MASS::fitdistr(res_pred$raw[1:nrow(dados4)],
densfun = "normal")$estimate[2]
mean4 = MASS::fitdistr(res_pred$raw[(nrow(dados4)+1):nrow(res_pred)],
densfun = "normal")$estimate[1]
sd4 = MASS::fitdistr(res_pred$raw[(nrow(dados4)+1):nrow(res_pred)],
densfun = "normal")$estimate[2]
mean3
sd3
mean4
sd4
g1 <- ggplot(data = res_pred, aes(x=pearson))+
geom_histogram(fill=1,alpha=0.5, col = 1)+
theme_bw()+
xlab('')+
ylab('')+
geom_vline(xintercept = 0, col = 2, lty = 2, lwd = 1)+
facet_wrap(~resp, scales = 'free') +
ggtitle('Resíduo Pearson')
g2 <- ggplot(data = res_pred, aes(x=raw))+
geom_histogram(fill=1,alpha=0.5, col = 1)+
theme_bw()+
xlab('')+
ylab('')+
geom_vline(xintercept = 0, col = 2, lty = 2, lwd = 1)+
facet_wrap(~resp, scales = 'free') +
ggtitle('Resíduo cru')
ggpubr::ggarrange(g1,g2, nrow = 2)
g1 <- ggplot(data = res_pred,
mapping = aes(sample = pearson)) +
geom_qq(alpha = 0.5) + geom_qq_line(col = 2)+
theme_bw() +
xlab('')+
ylab('Quantis amostrais') +
ggtitle('Resíduo Pearson') + facet_wrap(~resp, scales = 'free')
g2 <- ggplot(data = res_pred,
mapping = aes(sample = raw)) +
geom_qq(alpha = 0.5) + geom_qq_line(col = 2)+
theme_bw() +
xlab('Quantis teóricos')+
ylab('Quantis amostrais') +
ggtitle('Resíduo cru') + facet_wrap(~resp, scales = 'free')
ggpubr::ggarrange(g1,g2, nrow = 2)
g1 <- ggplot(data = res_pred, aes(y=pearson,x=preditos))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('')+
ylab('Resíduos') +
ggtitle('Resíduo Pearson') + facet_wrap(~resp, scales = 'free')
g2 <- ggplot(data = res_pred, aes(y=raw,x=preditos))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('Preditos')+
ylab('Resíduos') +
ggtitle('Resíduo cru') + facet_wrap(~resp, scales = 'free')
ggpubr::ggarrange(g1,g2, nrow = 2)
g1 <- ggplot(data = res_pred, aes(y=pearson,x=index))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('')+
ylab('Resíduos') +
ggtitle('Resíduo Pearson') + facet_wrap(~resp, scales = 'free')
g2 <- ggplot(data = res_pred, aes(y=raw,x=index))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('Preditos')+
ylab('Resíduos') +
ggtitle('Resíduo cru') + facet_wrap(~resp, scales = 'free')
ggpubr::ggarrange(g1,g2, nrow = 2)
dados4$pred_yale <- res_pred$preditos[1:nrow(dados4)]
dados4$pred_ecap <- res_pred$preditos[(nrow(dados4)+1):nrow(res_pred)]
dados4$pearson_yale <- res_pred$pearson[1:nrow(dados4)]
dados4$pearson_ecap <- res_pred$pearson[(nrow(dados4)+1):nrow(res_pred)]
dados4$raw_yale <- res_pred$raw[1:nrow(dados4)]
dados4$raw_ecap <- res_pred$raw[(nrow(dados4)+1):nrow(res_pred)]
mal_ajustados <- subset(dados4,
pearson_yale   >  2    |
pearson_yale < -2    |
pearson_ecap  >  2 |
pearson_ecap  < -2
)
nrow(mal_ajustados)
mal_ajustados
# SAIDA DO MODELO
resumo <- summary(fit)
betas_yale <- round(resumo[[1]]$Regression, 4)
betas_ecap <- round(resumo[[2]]$Regression, 4)
round(resumo$`Resp.Variable 1`$Power,4)
round(resumo$`Resp.Variable 1`$tau,4)
round(resumo$`Resp.Variable 2`$Power,4)
round(resumo$`Resp.Variable 2`$tau,4)
confint(fit)
beta_yale <- data.frame(name = rownames(resumo$`Resp.Variable 1`$Regression),
exp_est = exp(round(resumo$`Resp.Variable 1`$Regression$Estimates,2)),
ic_min = as.vector(exp(confint(fit)[1:6,])[,1]),
ic_max = as.vector(exp(confint(fit)[1:6,])[,2]))
beta_ecap <- data.frame(name = rownames(resumo$`Resp.Variable 2`$Regression),
exp_est = exp(round(resumo$`Resp.Variable 2`$Regression$Estimates,2)),
ic_min = as.vector(exp(confint(fit)[7:12,])[,1]),
ic_max = as.vector(exp(confint(fit)[7:12,])[,2]))
beta_yale[,2:4] <- round(beta_yale[,2:4],2)
beta_ecap[,2:4] <- round(beta_ecap[,2:4],2)
beta_yale
beta_ecap
table4 <- expand.grid(Grupo=levels(dados4$grupo),
Momento=levels(dados4$momento))
attach(table4)
table4$lin_pred_yale <-
betas_yale$Estimate[1] +
betas_yale$Estimate[2]*I(Momento==levels(dados4$momento)[2])+
betas_yale$Estimate[3]*I(Momento==levels(dados4$momento)[3])+
betas_yale$Estimate[4]*I(Grupo==levels(dados4$grupo)[2])+
betas_yale$Estimate[5]*I(Momento==levels(dados4$momento)[2])*I(Grupo==levels(dados4$grupo)[2])+
betas_yale$Estimate[6]*I(Momento==levels(dados4$momento)[3])*I(Grupo==levels(dados4$grupo)[2])
table4$mean_pred_yale <- round(exp(table4$lin_pred_yale),2)
table4$lin_pred_yale <- round(table4$lin_pred_yale,2)
table4$lin_pred_ecap <-
betas_ecap$Estimate[1] +
betas_ecap$Estimate[2]*I(Momento==levels(dados4$momento)[2])+
betas_ecap$Estimate[3]*I(Momento==levels(dados4$momento)[3])+
betas_ecap$Estimate[4]*I(Grupo==levels(dados4$grupo)[2])+
betas_ecap$Estimate[5]*I(Momento==levels(dados4$momento)[2])*I(Grupo==levels(dados4$grupo)[2])+
betas_ecap$Estimate[6]*I(Momento==levels(dados4$momento)[3])*I(Grupo==levels(dados4$grupo)[2])
table4$mean_pred_ecap <- round(exp(table4$lin_pred_ecap),2)
table4$lin_pred_ecap <- round(table4$lin_pred_ecap,2)
detach(table4)
tabela <- table4[,c(1,2,4,6)]
names(tabela) <- c('Grupo', 'Momento', 'Yale predito', 'Ecap predito')
tabela
table4_plot <- data.frame(Grupo = rep(table4$Grupo,2),
Momento = rep(table4$Momento,2),
Métrica = c(rep('Yale',6),
rep('Ecap',6)),
Predito = c(table4$mean_pred_yale, table4$mean_pred_ecap))
ggplot(table4_plot, aes(x=Momento,
y=Predito,
group = Grupo))+
theme_bw() +
geom_line(aes(group=Grupo, linetype=Grupo)) +
theme(legend.position = 'top') +
#labs(title = "Ecap")+
xlab('Experimental moment') +
ylab('Estimate')+ geom_point() +
facet_wrap(~Métrica, scales = 'free')
