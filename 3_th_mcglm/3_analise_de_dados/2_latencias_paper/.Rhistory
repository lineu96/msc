tuning = 0.1,
max_iter = 6000,
tol = 1e-1),
power_fixed = c(F,F),
data = data_boot)
)
# Resíduos
## chol(vcov) inversa
chol_inv <- Matrix::chol(fit_boot$inv_C)
## Resíduos empilhados
residuos <- as.numeric(residuals(fit_boot, type = 'raw'))
## Produto matricial
pearson <- as.numeric(chol_inv%*%residuos)
## Preditos
preditos <- fit$fitted
## Dataframe
res_pred_boot[[i]] <- data.frame(index = rep(1:nrow(data_boot),2),
resp = c(rep('min_lat', nrow(data_boot)),
rep('max_lat', nrow(data_boot))),
observado = c(dados2$min_lat,
dados2$max_lat),
preditos = preditos,
pearson = pearson,
raw = residuos
)
}
x11()
x11()
par(mfrow = c(1,2))
temp <- subset(res_pred_boot[[1]], resp == 'min_lat')
for (i in 2:length(res_pred_boot)) {
temp <- rbind(temp,
subset(res_pred_boot[[i]], resp == 'min_lat'))
}
plot(pearson~preditos, subset(res_pred, resp == 'min_lat'),
pch=20, xlab = 'Preditos', ylab = 'Pearson', main = 'Min. Lat.',
col = 'white', las =T)
points(pearson~preditos,
temp,
col='#BDBDBD',
pch = 15)
points(pearson~preditos, subset(res_pred, resp == 'min_lat'), pch=20)
abline(h = quantile(temp$pearson, probs = c(0.025, 0.975)),
lwd = 2, lty = 2, col = 2)
temp2 <- subset(res_pred_boot[[1]], resp == 'max_lat')
for (i in 2:length(res_pred_boot)) {
temp2 <- rbind(temp2,
subset(res_pred_boot[[i]], resp == 'max_lat'))
}
nrow(temp2)
nrow(temp)
plot(pearson~preditos, subset(res_pred, resp == 'max_lat'),
pch=20, xlab = 'Preditos', ylab = 'Pearson', main = 'Max. Lat.',
col = 'white', las =T)
points(pearson~preditos,
temp2,
col='#BDBDBD',
pch = 15)
points(pearson~preditos, subset(res_pred, resp == 'max_lat'), pch=20)
abline(h = quantile(temp2$pearson, probs = c(0.025, 0.975)),
lwd = 2, lty = 2, col = 2)
plot(pearson~preditos, subset(res_pred, resp == 'min_lat'),
pch=20, xlab = 'Preditos', ylab = 'Pearson', main = 'Min. Lat.',
col = 'white', las =T, ylim = c(-5,5))
points(pearson~preditos,
temp,
col='#BDBDBD',
pch = 15)
points(pearson~preditos, subset(res_pred, resp == 'min_lat'), pch=20)
abline(h = quantile(temp$pearson, probs = c(0.025, 0.975)),
lwd = 2, lty = 2, col = 2)
plot(pearson~preditos, subset(res_pred, resp == 'max_lat'),
pch=20, xlab = 'Preditos', ylab = 'Pearson', main = 'Max. Lat.',
col = 'white', las =T, ylim = c(-5,5))
points(pearson~preditos,
temp2,
col='#BDBDBD',
pch = 15)
points(pearson~preditos, subset(res_pred, resp == 'max_lat'), pch=20)
abline(h = quantile(temp2$pearson, probs = c(0.025, 0.975)),
lwd = 2, lty = 2, col = 2)
max(temp$pearson)
max(temp2$pearson)
min(temp$pearson)
min(temp2$pearson)
plot(pearson~preditos, subset(res_pred, resp == 'min_lat'),
pch=20, xlab = 'Preditos', ylab = 'Pearson', main = 'Min. Lat.',
col = 'white', las =T, ylim = c(-3,6.2))
points(pearson~preditos,
temp,
col='#BDBDBD',
pch = 15)
points(pearson~preditos, subset(res_pred, resp == 'min_lat'), pch=20)
abline(h = quantile(temp$pearson, probs = c(0.025, 0.975)),
lwd = 2, lty = 2, col = 2)
plot(pearson~preditos, subset(res_pred, resp == 'max_lat'),
pch=20, xlab = 'Preditos', ylab = 'Pearson', main = 'Max. Lat.',
col = 'white', las =T, ylim = c(-3,6.2))
points(pearson~preditos,
temp2,
col='#BDBDBD',
pch = 15)
points(pearson~preditos, subset(res_pred, resp == 'max_lat'), pch=20)
abline(h = quantile(temp2$pearson, probs = c(0.025, 0.975)),
lwd = 2, lty = 2, col = 2)
#---------------------------------------------------------------
# DADOS
#---------------------------------------------------------------
# Diretório dos dados e biblioteca
library(mcglm)
library(Matrix)
library(tidyverse)
#---------------------------------------------------------------
# Leitura e tratamento dos dados
dados <- read.csv2('~/msc/3_th_mcglm/3_analise_de_dados/2_latencias_paper/latencias_1_NOVA.csv',  header = T,  sep = ',')
names(dados) <- c('n',  'code',  'inst',  'op0',  'op1',  'op2',
'lock',  'set_rex',  'segment',  'mem_xchg',
'p0156',  'p06',  'p23',  'p237',  'p4',  'p1',
'p15',  'p015',  'p5',  'p0',  'p05',  'p01',
'p6',  'min_lat',  'max_lat',  'count')
## Seleção das variaveis de interesse
dados <- select(dados,  n,  inst,  lock,  segment,
p0156,  p06,  p23, p237,  p4,  p1,  p15,  p0,  p05,
min_lat,  max_lat,  count)
## Transformando portas em binária
dados$lock <- as.factor(ifelse(dados$lock > 0,  1, 0))
dados$p0156 <- as.factor(ifelse(dados$p0156 > 0,  1, 0))
dados$p06 <- as.factor(ifelse(dados$p06 > 0,  1, 0))
dados$p23 <- as.factor(ifelse(dados$p23 > 0,  1, 0))
dados$p0 <- as.factor(ifelse(dados$p0 > 0,  1, 0))
dados$p237 <- as.factor(ifelse(dados$p237 > 0,  1, 0))
dados$p4 <- as.factor(ifelse(dados$p4 > 0,  1, 0))
dados$p1 <- as.factor(ifelse(dados$p1 > 0,  1, 0))
dados$p15 <- as.factor(ifelse(dados$p15 > 0,  1, 0))
dados$segment <- ifelse(dados$segment > 0,  1, 0)
## Selecionando instruções
exclusao <-c('CMPXCHG8B',
'CMPXCHG8B_LOCK',
'DIV_NOREX',
'DIV_REX',
'ENTER',
'ENTER_W',
'IDIV_NOREX',
'IDIV_REX',
'MOVSB',
'MOVSD',
'MOVSW',
'SGDT',
'SIDT',
'SLDT',
'STOSB',
'STOSD',
'STOSW',
'MOV_DR',
'VERR',
'BTC_LOCK',
'BTR_LOCK',
'BTS_LOCK',
'LAR',
'LSL',
'VERW',
'XCHG_NOREX',
'XCHG_REX',
'POP',
'DIV',
'IDIV',
'PUSH',
'XCHG',
'BTC',
'BTR',
'BTS',
'MOV',
'RCL',
'RCR'
)
#barplot(table(dados$max_lat))
dados2 <- subset(dados, !(dados$inst %in% exclusao))
nrow(dados)-nrow(dados2)
#---------------------------------------------------------------
# EXPLORATÓRIA
#---------------------------------------------------------------
a <- ggplot(dados2, aes(x = min_lat)) +
geom_histogram(col = 1, fill='white') +
xlab('Count') +
ylab('Frequency') +
theme_bw() +
#scale_y_continuous(breaks = round(seq(0, 120, length.out = 3), 2)) +
ggtitle('a')
b <- ggplot(data = dados2,
mapping = aes_string(x='lock', y='min_lat')) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(alpha = 1)+
theme_light() +
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")+
xlab('Lock') + ylab('Min. Lat.') + ggtitle('b')
c <- ggplot(data = dados2,
mapping = aes_string(x='p0156', y='min_lat')) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(alpha = 1)+
theme_light() +
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")+
xlab('p0156') + ylab('') + ggtitle('c')
d <- ggplot(data = dados2,
mapping = aes_string(x='p06', y='min_lat')) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(alpha = 1)+
theme_light() +
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")+
xlab('p06') + ylab('') + ggtitle('d')
e <- ggplot(data = dados2,
mapping = aes_string(x='p23', y='min_lat')) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(alpha = 1)+
theme_light() +
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")+
xlab('p23') + ylab('') + ggtitle('e')
f <- ggplot(data = dados2,
mapping = aes_string(x='p237', y='min_lat')) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(alpha = 1)+
theme_light() +
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")+
xlab('p237') + ylab('') + ggtitle('f')
g <- ggplot(data = dados2,
mapping = aes_string(x='p4', y='min_lat')) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(alpha = 1)+
theme_light() +
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")+
xlab('p4') + ylab('') + ggtitle('g')
h <- ggplot(data = dados2,
mapping = aes_string(x='p1', y='min_lat')) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(alpha = 1)+
theme_light() +
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")+
xlab('p1') + ylab('') + ggtitle('h')
i <- ggplot(dados2, aes(x = max_lat)) +
geom_histogram(col = 1, fill='white') +
xlab('Count') +
ylab('Frequency') +
theme_bw() +
#scale_y_continuous(breaks = round(seq(0, 120, length.out = 3), 2)) +
ggtitle('i')
j <- ggplot(data = dados2,
mapping = aes_string(x='lock', y='max_lat')) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(alpha = 1)+
theme_light() +
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")+
xlab('Lock') + ylab('Max. Lat.') + ggtitle('j')
k <- ggplot(data = dados2,
mapping = aes_string(x='p0156', y='max_lat')) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(alpha = 1)+
theme_light() +
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")+
xlab('p0156') + ylab('') + ggtitle('k')
l <- ggplot(data = dados2,
mapping = aes_string(x='p06', y='max_lat')) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(alpha = 1)+
theme_light() +
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")+
xlab('p06') + ylab('') + ggtitle('l')
m <- ggplot(data = dados2,
mapping = aes_string(x='p23', y='max_lat')) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(alpha = 1)+
theme_light() +
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")+
xlab('p23') + ylab('') + ggtitle('m')
n <- ggplot(data = dados2,
mapping = aes_string(x='p237', y='max_lat')) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(alpha = 1)+
theme_light() +
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")+
xlab('p237') + ylab('') + ggtitle('n')
o <- ggplot(data = dados2,
mapping = aes_string(x='p4', y='max_lat')) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(alpha = 1)+
theme_light() +
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")+
xlab('p4') + ylab('') + ggtitle('o')
p <- ggplot(data = dados2,
mapping = aes_string(x='p1', y='max_lat')) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(alpha = 1)+
theme_light() +
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")+
xlab('p1') + ylab('') + ggtitle('p')
x11()
ggpubr::ggarrange(a,b,c,d,e,f,g,h,
i,j,k,l,m,n,o,p,
nrow = 2, ncol = 8)
#---------------------------------------------------------------
form.min_lat <- min_lat ~ (lock + p0156 + p06 + p23 + p237 + p4 + p1 #+ p15 + p0
)
form.max_lat <- max_lat ~ (lock + p0156 + p06 + p23 + p237 + p4 + p1 #+ p15 + p0
)
Z0 <- mc_id(dados2) # Identidade
fit <-
mcglm(linear_pred = c(form.min_lat,
form.max_lat),
matrix_pred = list(c(Z0),
c(Z0)),
link = c("log", "log"),
variance = c("poisson_tweedie", "poisson_tweedie"),
control_algorithm = list(verbose = T,
tuning = 0.5,
max_iter = 6000,
tol = 1e-8),
power_fixed = c(F,F),
data = dados2)
matplot(fit$IterationCovariance, type = 'l', xlim = c(1,65))
summary(fit)
## chol(vcov) inversa
chol_inv <- Matrix::chol(fit$inv_C)
## Resíduos empilhados
residuos <- as.numeric(residuals(fit, type = 'raw'))
## Produto matricial
pearson <- as.numeric(chol_inv%*%residuos)
## Preditos
preditos <- fit$fitted
## Dataframe
res_pred <- data.frame(index = rep(1:nrow(dados2),2),
resp = c(rep('min_lat', nrow(dados2)),
rep('max_lat', nrow(dados2))),
observado = c(dados2$min_lat,
dados2$max_lat),
preditos = preditos,
pearson = pearson,
raw = residuos
)
g1 <- ggplot(data = res_pred, aes(y=pearson,x=preditos))+
geom_point(alpha=0.5)+
theme_bw()+
geom_smooth(col=2, method = 'loess', se=F)+
xlab('')+
ylab('Resíduos') +
ggtitle('Resíduo Pearson') + facet_wrap(~resp, scales = 'free')
g1
res_pred_boot <- list()
# Reamostras
for (i in 1:1100) {
print(i)
# Índices
index <- sample(nrow(dados2), replace = T)
# Dados
data_boot <- dados2[index,]
# Ajuste
try(
fit_boot <-
mcglm(linear_pred = c(form.min_lat,
form.max_lat),
matrix_pred = list(c(Z0),
c(Z0)),
link = c("log", "log"),
variance = c("poisson_tweedie", "poisson_tweedie"),
control_algorithm =
list(#verbose = T,
tuning = 0.1,
max_iter = 6000,
tol = 1e-1),
power_fixed = c(F,F),
data = data_boot)
)
# Resíduos
## chol(vcov) inversa
chol_inv <- Matrix::chol(fit_boot$inv_C)
## Resíduos empilhados
residuos <- as.numeric(residuals(fit_boot, type = 'raw'))
## Produto matricial
pearson <- as.numeric(chol_inv%*%residuos)
## Preditos
preditos <- fit$fitted
## Dataframe
res_pred_boot[[i]] <- data.frame(index = rep(1:nrow(data_boot),2),
resp = c(rep('min_lat', nrow(data_boot)),
rep('max_lat', nrow(data_boot))),
observado = c(dados2$min_lat,
dados2$max_lat),
preditos = preditos,
pearson = pearson,
raw = residuos
)
}
par(mfrow = c(1,2))
temp <- subset(res_pred_boot[[1]], resp == 'min_lat')
for (i in 2:length(res_pred_boot)) {
temp <- rbind(temp,
subset(res_pred_boot[[i]], resp == 'min_lat'))
}
temp2 <- subset(res_pred_boot[[1]], resp == 'max_lat')
for (i in 2:length(res_pred_boot)) {
temp2 <- rbind(temp2,
subset(res_pred_boot[[i]], resp == 'max_lat'))
}
plot(pearson~preditos, subset(res_pred, resp == 'min_lat'),
pch=20, xlab = 'Preditos', ylab = 'Pearson', main = 'Min. Lat.',
col = 'white', las =T, ylim = c(-3,6.2))
points(pearson~preditos,
temp,
col='#BDBDBD',
pch = 15)
points(pearson~preditos, subset(res_pred, resp == 'min_lat'), pch=20)
abline(h = quantile(temp$pearson, probs = c(0.025, 0.975)),
lwd = 2, lty = 2, col = 2)
plot(pearson~preditos, subset(res_pred, resp == 'max_lat'),
pch=20, xlab = 'Preditos', ylab = 'Pearson', main = 'Max. Lat.',
col = 'white', las =T, ylim = c(-3,6.2))
points(pearson~preditos,
temp2,
col='#BDBDBD',
pch = 15)
points(pearson~preditos, subset(res_pred, resp == 'max_lat'), pch=20)
abline(h = quantile(temp2$pearson, probs = c(0.025, 0.975)),
lwd = 2, lty = 2, col = 2)
par(mfrow = c(1,2))
plot(pearson~preditos, subset(res_pred, resp == 'min_lat'),
pch=20, xlab = 'Preditos', ylab = 'Pearson', main = 'Min. Lat.',
col = 'white', las =T, ylim = c(-3,6.2))
points(pearson~preditos,
temp,
col='#BDBDBD',
pch = 15)
points(pearson~preditos, subset(res_pred, resp == 'min_lat'), pch=20)
abline(h = quantile(temp$pearson, probs = c(0.025, 0.975)),
lwd = 2, lty = 2, col = 2)
plot(pearson~preditos, subset(res_pred, resp == 'max_lat'),
pch=20, xlab = 'Preditos', ylab = 'Pearson', main = 'Max. Lat.',
col = 'white', las =T, ylim = c(-3,6.2))
points(pearson~preditos,
temp2,
col='#BDBDBD',
pch = 15)
points(pearson~preditos, subset(res_pred, resp == 'max_lat'), pch=20)
abline(h = quantile(temp2$pearson, probs = c(0.025, 0.975)),
lwd = 2, lty = 2, col = 2)
save.image("~/msc/3_th_mcglm/3_analise_de_dados/2_latencias_paper/res_pred_boot.RData")
