p <- exp(X%*%betas)/(1 + exp(X%*%betas))
paramslists <- list(
m1 = list(p = p, size = 1),
m2 = list(p = p, size = 1),
m3 = list(p = p, size = 1)
)
cor_matrix <- matrix(c(1.0,  0.75, 0.5,
0.75,  1.0, 0.25,
0.5,  0.25, 1.0
),3,3)
y <- NORTARA::genNORTARA(sample_size,
cor_matrix,
invcdfnames,
paramslists)
cor_matrix
cor(y)
y <- as.data.frame(y)
names(y) <- c('y1', 'y2', 'y3')
y$x <- trat
datasets <- y
# McGLM
library(mcglm)
cor_matrix
cor(y)
sample_size = 500
n_datasets = 200
n_treatment = 4
betas = c(0.5,0,0,0)
n_distances = 20
distribution = 'binomial'
# tratamentos
trat <- gl(n_treatment, sample_size/n_treatment)
# matriz do modelo
X <- model.matrix(~ trat)
invcdfnames <- c("qbinom","qbinom", "qbinom")
p <- exp(X%*%betas)/(1 + exp(X%*%betas))
paramslists <- list(
m1 = list(p = p, size = 1),
m2 = list(p = p, size = 1),
m3 = list(p = p, size = 1)
)
cor_matrix <- matrix(c(1.0,  0.75, 0.5,
0.75,  1.0, 0.25,
0.5,  0.25, 1.0
),3,3)
y <- NORTARA::genNORTARA(sample_size,
cor_matrix,
invcdfnames,
paramslists)
cor_matrix
cor(y)
y <- as.data.frame(y)
names(y) <- c('y1', 'y2', 'y3')
y$x <- trat
datasets <- y
# McGLM
library(mcglm)
link <- "logit"
variance <- "binomialP"
form1 = y1~x
form2 = y2~x
form3 = y3~x
Z0 <- mc_id(datasets)
fit <-
mcglm(linear_pred = c(form1, form2, form3),
matrix_pred = list(Z0,Z0,Z0),
link = c(link, link, link),
variance = c(variance, variance, variance),
Ntrial = list(1,1,1),
data = datasets)
coef(fit)
sample_size = 100
n_datasets = 200
n_treatment = 4
betas = c(5,0,0,0)
n_distances = 20
distribution = 'binomial'
# tratamentos
trat <- gl(n_treatment, sample_size/n_treatment)
# matriz do modelo
X <- model.matrix(~ trat)
normal <- gamlss.dist::qNO
invcdfnames <- c("normal",
"normal",
"normal")
mu <- X%*%betas
paramslists <- list(
m1 = list(mu = mu, sigma = 1),
m2 = list(mu = mu, sigma = 1),
m3 = list(mu = mu, sigma = 1)
)
cor_matrix <- matrix(c(1.0,  0.75, 0.5,
0.75,  1.0, 0.25,
0.5,  0.25, 1.0
),3,3)
y <- NORTARA::genNORTARA(sample_size,
cor_matrix,
invcdfnames,
paramslists)
cor_matrix
cor(y)
sample_size = 100
n_datasets = 200
n_treatment = 4
betas = c(5,0,0,0)
n_distances = 20
distribution = 'binomial'
# tratamentos
trat <- gl(n_treatment, sample_size/n_treatment)
# matriz do modelo
X <- model.matrix(~ trat)
normal <- gamlss.dist::qNO
invcdfnames <- c("normal",
"normal",
"normal")
sample_size = 500
n_treatment = 4
betas = c(0.5,0,0,0)
# tratamentos
trat <- gl(n_treatment, sample_size/n_treatment)
# matriz do modelo
X <- model.matrix(~ trat)
invcdfnames <- c("qbinom","qbinom", "qbinom")
p <- exp(X%*%betas)/(1 + exp(X%*%betas))
paramslists <- list(
m1 = list(p = p, size = 1),
m2 = list(p = p, size = 1),
m3 = list(p = p, size = 1)
)
cor_matrix <- matrix(c(1.0,  0.75, 0.5,
0.75,  1.0, 0.25,
0.5,  0.25, 1.0
),3,3)
y <- NORTARA::genNORTARA(sample_size,
cor_matrix,
invcdfnames,
paramslists)
cor_matrix
cor(y)
y <- as.data.frame(y)
names(y) <- c('y1', 'y2', 'y3')
y$x <- trat
datasets <- y
sample_size = 100
n_treatment = 4
betas = c(5,0,0,0)
# tratamentos
trat <- gl(n_treatment, sample_size/n_treatment)
# matriz do modelo
X <- model.matrix(~ trat)
normal <- gamlss.dist::qNO
invcdfnames <- c("normal",
"normal",
"normal")
sample_size = 500
n_treatment = 4
betas = c(5,0,0,0)
# tratamentos
trat <- gl(n_treatment, sample_size/n_treatment)
# matriz do modelo
X <- model.matrix(~ trat)
normal <- gamlss.dist::qNO
invcdfnames <- c("normal",
"normal",
"normal")
mu <- X%*%betas
paramslists <- list(
m1 = list(mu = mu, sigma = 1),
m2 = list(mu = mu, sigma = 1),
m3 = list(mu = mu, sigma = 1)
)
cor_matrix <- matrix(c(1.0,  0.75, 0.5,
0.75,  1.0, 0.25,
0.5,  0.25, 1.0
),3,3)
y <- NORTARA::genNORTARA(sample_size,
cor_matrix,
invcdfnames,
paramslists)
cor_matrix
cor(y)
y <- as.data.frame(y)
names(y) <- c('y1', 'y2', 'y3')
y$x <- trat
datasets <- y
datasets
sample_size = 500
n_treatment = 4
betas = c(5,0,0,0)
sample_size = 500
n_treatment = 4
betas = c(2.3,0,0,0)
# tratamentos
trat <- gl(n_treatment, sample_size/n_treatment)
# matriz do modelo
X <- model.matrix(~ trat)
invcdfnames <- c("qpois","qpois", "qpois")
lambda <- exp(X%*%betas)
paramslists <- list(
m1 = list(lambda = lambda),
m2 = list(lambda = lambda),
m3 = list(lambda = lambda)
)
cor_matrix <- matrix(c(1.0,  0.75, 0.5,
0.75,  1.0, 0.25,
0.5,  0.25, 1.0
),3,3)
y <- NORTARA::genNORTARA(sample_size,
cor_matrix,
invcdfnames,
paramslists)
cor_matrix
cor(y)
y <- as.data.frame(y)
names(y) <- c('y1', 'y2', 'y3')
y$x <- trat
datasets <- y
datasets
invcdfnames <- c("qpois","qpois", "qpois")
paramslists <- list(
m1 = list(lambda = 2),
m2 = list(lambda = 2),
m3 = list(lambda = 2)
)
cor_matrix <- matrix(c(1.0,  0.75, 0.5,
0.75,  1.0, 0.25,
0.5,  0.25, 1.0
),3,3)
cor_matrix
res <- NORTARA::genNORTARA(1000,
cor_matrix,
invcdfnames,
paramslists)
head(res,5)
cor(res)
cor_matrix
round(cor(res),2)
sample_size = 1000
n_treatment = 4
betas = c(5,0,0,0)
n_datasets = 2
n_distances = 20
distribution = 'normal'
# tratamentos
trat <- gl(n_treatment, sample_size/n_treatment)
# matriz do modelo
X <- model.matrix(~ trat)
## Marginais
switch(distribution,
"poisson" = {
invcdfnames <- c("qpois","qpois", "qpois")
link <- "log"
variance <- "tweedie"
},
"binomial" = {
invcdfnames <- c("qbinom","qbinom", "qbinom")
link <- "logit"
variance <- "binomialP"
},
"normal" = {
normal <- gamlss.dist::qNO
invcdfnames <- c("normal","normal", "normal")
link <- "identity"
variance <- "constant"
}
)
normal
invcdfnames
link
variance
cor_matrix <- matrix(c(1.0,  0.75, 0.5,
0.75,  1.0, 0.25,
0.5,  0.25, 1.0
),3,3)
# lista para armazenar os conjuntos de dados
datasets <- list()
for (i in 1:n_datasets) {
# Argumentos das marginais
switch(distribution,
"poisson" = {
lambda <- exp(X%*%betas)
paramslists <- list(
m1 = list(lambda = lambda),
m2 = list(lambda = lambda),
m3 = list(lambda = lambda)
)
},
"binomial" = {
p <- exp(X%*%betas)/(1 + exp(X%*%betas))
paramslists <- list(
m1 = list(p = p, size = 1),
m2 = list(p = p, size = 1),
m3 = list(p = p, size = 1)
)
},
"normal" = {
mu <- X%*%betas
paramslists <- list(
m1 = list(mu = mu, sigma = 1),
m2 = list(mu = mu, sigma = 1),
m3 = list(mu = mu, sigma = 1)
)
}
)
y <- NORTARA::genNORTARA(sample_size,
cor_matrix,
invcdfnames,
paramslists)
datasets[[i]] <- data.frame(y = y,
x = trat)
names(datasets[[i]]) <- c('y1', 'y2', 'y3', 'x')
}
datasets
library(mcglm)
library(Matrix)
#----------------------------------------------------------------
# minhas funções
source('~/msc/3_th_mcglm/0_funcoes/functions.R')
dir()
setwd("~/msc/3_th_mcglm/4_estudo_simulacao")
dir
dir()
source('~/msc/3_th_mcglm/4_estudo_simulacao/simula_thmcglm_uni.R')
source('~/msc/3_th_mcglm/4_estudo_simulacao/simula_tri_pois_binom.R')
source('~/msc/3_th_mcglm/4_estudo_simulacao/analises/grafico.R')
n_datasets = 500
n_treatment = 4
n_distances = 20
betas_normal = c(5,0,0,0)
betas_poisson = c(2.3,0,0,0)
betas_binomial = c(0.5,0,0,0)
sample_size = 50
simula_uni(sample_size = sample_size,
n_datasets = n_datasets,
n_treatment = n_treatment,
betas = betas_normal,
n_distances = n_distances,
distribution = 'normal')
n_datasets = 10
n_treatment = 4
n_distances = 20
betas_normal = c(5,0,0,0)
betas_poisson = c(2.3,0,0,0)
betas_binomial = c(0.5,0,0,0)
sample_size = 50
normal_uni_n50 <- simula_uni(sample_size = sample_size,
n_datasets = n_datasets,
n_treatment = n_treatment,
betas = betas_normal,
n_distances = n_distances,
distribution = 'normal')
normal_uni_n50
binomial_uni_n50 <- simula_uni(sample_size = sample_size,
n_datasets = n_datasets,
n_treatment = n_treatment,
betas = betas_binomial,
n_distances = n_distances,
distribution = 'binomial')
binomial_uni_n50
poisson_uni_n50 <- simula_uni(sample_size = sample_size,
n_datasets = n_datasets,
n_treatment = n_treatment,
betas = betas_poisson,
n_distances = n_distances,
distribution = 'poisson')
poisson_uni_n50
sample_size = 100
normal_uni_n100 <- simula_uni(sample_size = sample_size,
n_datasets = n_datasets,
n_treatment = n_treatment,
betas = betas_normal,
n_distances = n_distances,
distribution = 'normal')
binomial_uni_n100 <- simula_uni(sample_size = sample_size,
n_datasets = n_datasets,
n_treatment = n_treatment,
betas = betas_binomial,
n_distances = n_distances,
distribution = 'binomial')
poisson_uni_n100 <- simula_uni(sample_size = sample_size,
n_datasets = n_datasets,
n_treatment = n_treatment,
betas = betas_poisson,
n_distances = n_distances,
distribution = 'poisson')
sample_size = 250
normal_uni_n250 <- simula_uni(sample_size = sample_size,
n_datasets = n_datasets,
n_treatment = n_treatment,
betas = betas_normal,
n_distances = n_distances,
distribution = 'normal')
binomial_uni_n250 <- simula_uni(sample_size = sample_size,
n_datasets = n_datasets,
n_treatment = n_treatment,
betas = betas_binomial,
n_distances = n_distances,
distribution = 'binomial')
poisson_uni_n250 <- simula_uni(sample_size = sample_size,
n_datasets = n_datasets,
n_treatment = n_treatment,
betas = betas_poisson,
n_distances = n_distances,
distribution = 'poisson')
sample_size = 500
normal_uni_n500 <- simula_uni(sample_size = sample_size,
n_datasets = n_datasets,
n_treatment = n_treatment,
betas = betas_normal,
n_distances = n_distances,
distribution = 'normal')
binomial_uni_n500 <- simula_uni(sample_size = sample_size,
n_datasets = n_datasets,
n_treatment = n_treatment,
betas = betas_binomial,
n_distances = n_distances,
distribution = 'binomial')
poisson_uni_n500 <- simula_uni(sample_size = sample_size,
n_datasets = n_datasets,
n_treatment = n_treatment,
betas = betas_poisson,
n_distances = n_distances,
distribution = 'poisson')
sample_size = 1000
normal_uni_n1000 <- simula_uni(sample_size = sample_size,
n_datasets = n_datasets,
n_treatment = n_treatment,
betas = betas_normal,
n_distances = n_distances,
distribution = 'normal')
binomial_uni_n1000 <- simula_uni(sample_size = sample_size,
n_datasets = n_datasets,
n_treatment = n_treatment,
betas = betas_binomial,
n_distances = n_distances,
distribution = 'binomial')
poisson_uni_n1000 <- simula_uni(sample_size = sample_size,
n_datasets = n_datasets,
n_treatment = n_treatment,
betas = betas_poisson,
n_distances = n_distances,
distribution = 'poisson')
save(
normal_uni_n50,
binomial_uni_n50,
poisson_uni_n50,
normal_uni_n100,
binomial_uni_n100,
poisson_uni_n100,
normal_uni_n250,
binomial_uni_n250,
poisson_uni_n250,
normal_uni_n500,
binomial_uni_n500,
poisson_uni_n500,
normal_uni_n1000,
binomial_uni_n1000,
poisson_uni_n1000,
file = "testes_uni.RData")
dir()
simula_tri_pois_binom(sample_size = sample_size,
n_datasets = n_datasets,
n_treatment = n_treatment,
betas = betas_normal,
n_distances = n_distances,
distribution = 'normal')
library(mcglm)
library(Matrix)
#----------------------------------------------------------------
# minhas funções
source('~/msc/3_th_mcglm/0_funcoes/functions.R')
source('~/msc/3_th_mcglm/4_estudo_simulacao/simula_thmcglm_uni.R')
source('~/msc/3_th_mcglm/4_estudo_simulacao/simula_tri_pois_binom.R')
source('~/msc/3_th_mcglm/4_estudo_simulacao/analises/grafico.R')
n_datasets = 10
n_treatment = 4
n_distances = 20
betas_normal = c(5,0,0,0)
betas_poisson = c(2.3,0,0,0)
betas_binomial = c(0.5,0,0,0)
sample_size = 50
normal_uni_n50 <- simula_uni(sample_size = sample_size,
n_datasets = n_datasets,
n_treatment = n_treatment,
betas = betas_normal,
n_distances = n_distances,
distribution = 'normal')
normal_uni_n50
simula_tri_pois_binom(sample_size = sample_size,
n_datasets = n_datasets,
n_treatment = n_treatment,
betas = betas_binomial,
n_distances = n_distances,
distribution = 'binomial')
binomial_tri_n50
binomial_tri_n50 <- simula_tri_pois_binom(sample_size = sample_size,
n_datasets = n_datasets,
n_treatment = n_treatment,
betas = betas_binomial,
n_distances = n_distances,
distribution = 'binomial')
binomial_tri_n250
binomial_tri_n100
poisson_tri_n50
binomial_tri_n50
poisson_tri_n50 <- simula_tri_pois_binom(sample_size = sample_size,
n_datasets = n_datasets,
n_treatment = n_treatment,
betas = betas_poisson,
n_distances = n_distances,
distribution = 'poisson')
poisson_tri_n50
