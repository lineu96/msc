plot(log(abs(rstudent(m1)))~log(m1$fitted.values))
plot(log(abs(rstudent(m1))/1000)~log(m1$fitted.values)/1000)
log(abs(rstudent(m1)))/1000
log(m1$fitted.values)/1000
plot(log(abs(rstudent(m1)))/1000~log(m1$fitted.values)/1000)
plot((log(abs(rstudent(m1)))/1000)~(log(m1$fitted.values)/1000))
m1 <- glm(interlocks + 1 ~ assets + sector + nation, data=Ornstein,
family = 'Gamma')
slp(m1)
m1 <- glm(interlocks + 1 ~ assets + sector + nation, data=Ornstein,
family = 'Gamma')
slp(m1)
plot(log(abs(rstudent(m1)))~log(m1$fitted.values))
m2 <- lm(interlocks + 1 ~ assets + sector + nation, data=Ornstein)
slp(m2)
plot(log(abs(rstudent(m2)))~log(m2$fitted.values))
par(mfrow = c(1,2))
m1 <- glm(interlocks + 1 ~ assets + sector + nation, data=Ornstein,
family = 'Gamma')
slp(m1)
plot(log(abs(rstudent(m1)))~log(m1$fitted.values))
m2 <- lm(interlocks + 1 ~ assets + sector + nation, data=Ornstein)
slp(m2)
plot(log(abs(rstudent(m2)))~log(m2$fitted.values))
slp(m2)
plot(log(abs(rstudent(m2)))~log(m2$fitted.values))
ceresPlots(lm(prestige~income+education+type, data=Prestige),
terms= ~ . - type)
ceresPlots(lm(prestige~income+education+type, data=Prestige),
terms= ~ . - type)
?crp	#ANÁLISE DO MODELO	Análise de resíduos
crPlots(m<-lm(prestige ~ income + education, data=Prestige))
crPlots(m, terms=~ . - education) # get only one plot
crPlots(lm(prestige ~ log2(income) + education + poly(women,2), data=Prestige))
crPlots(glm(partic != "not.work" ~ hincome + children,
data=Womenlf, family=binomial), smooth=list(span=0.75))
?influencePlot	#ANÁLISE DO MODELO	Análise de resíduos
influencePlot(lm(prestige ~ income + education, data=Duncan))
influencePlot(lm(prestige ~ income + education, data=Duncan))
?residualPlot	#ANÁLISE DO MODELO	Análise de resíduos
m1 <- lm(prestige ~ income, data=Prestige)
m1
residualPlots(m1)
residualPlots(m1, terms= ~ 1 | type) # plot vs. yhat grouping by type
#---------------------------
?marginalModelPlot	#ANÁLISE DO MODELO	Modelo marginal
?mcPlot	#ANÁLISE DO MODELO	Modelo marginal e condicional
c1 <- lm(infantMortality ~ ppgdp, UN)
mmps(c1)
c2 <- update(c1, ~ log(ppgdp))
mmps(c2)
# include SD lines
p1 <- lm(prestige ~ income + education, Prestige)
mmps(p1, sd=TRUE)
# condition on type:
mmps(p1, ~. | type)
# logisitic regression example
# smoothers return warning messages.
# fit a separate smoother and color for each type of occupation.
m1 <- glm(lfp ~ ., family=binomial, data=Mroz)
mmps(m1)
#---------------------------
?marginalModelPlot	#ANÁLISE DO MODELO	Modelo marginal
c1 <- lm(infantMortality ~ ppgdp, UN)
mmps(c1)
c2 <- update(c1, ~ log(ppgdp))
c2
# include SD lines
p1 <- lm(prestige ~ income + education, Prestige)
p1
mmps(p1, sd=TRUE)
# include SD lines
p1 <- lm(prestige ~ income + education, Prestige$education)
Prestige$education
# include SD lines
p1 <- lm(prestige ~ income + education, Prestige)
mmps(p1, sd=TRUE)
plot(Prestige$prestige~Prestige$education)
# include SD lines
p1 <- lm(prestige ~ education, Prestige)
mmps(p1, sd=TRUE)
# include SD lines
p1 <- lm(prestige ~ income + education, Prestige)
mmps(p1, sd=TRUE)
# condition on type:
mmps(p1, ~. | type)
# logisitic regression example
# smoothers return warning messages.
# fit a separate smoother and color for each type of occupation.
m1 <- glm(lfp ~ ., family=binomial, data=Mroz)
mmps(m1)
?mcPlot	#ANÁLISE DO MODELO	Modelo marginal e condicional
m1 <- lm(partic ~ tfr + menwage + womwage + debt + parttime, data = Bfox)
m1
mcPlot(m1, "womwage")
mcPlot(m1, "womwage", overlaid=FALSE, ellipse=TRUE)
mcPlot(m1, "womwage")
Bfox$partic
m1 <- lm(partic ~ tfr + menwage + womwage + debt + parttime, data = Bfox)
mcPlot(m1, "womwage")
mcPlot(m1, "womwage", overlaid=FALSE, ellipse=TRUE)
?vif
vif(lm(prestige ~ income + education, data=Duncan))
vif(lm(prestige ~ income + education + type, data=Duncan)
)
vif(lm(prestige ~ income + education + type, data=Duncan))
?avPlot	#ANÁLISE DO MODELO	?
m1 <- lm(partic ~ tfr + menwage + womwage + debt + parttime, Bfox)
m1
# marginal plot, ignoring other predictors:
with(Bfox, dataEllipse(womwage, partic, levels=0.5))
abline(lm(partic ~ womwage, Bfox), col="red", lwd=2)
# AV plot, adjusting for others:
avPlots(m1, ~ womwage, ellipse=list(levels=0.5))
# AV plot, adjusting and scaling as in marginal plot
avPlots(m1, ~ womwage, marginal.scale=TRUE, ellipse=list(levels=0.5))
# marginal plot, ignoring other predictors:
with(Bfox, dataEllipse(womwage, partic, levels=0.5))
abline(lm(partic ~ womwage, Bfox), col="red", lwd=2)
par(mfrow=c(1,3))
# marginal plot, ignoring other predictors:
with(Bfox, dataEllipse(womwage, partic, levels=0.5))
abline(lm(partic ~ womwage, Bfox), col="red", lwd=2)
# AV plot, adjusting for others:
avPlots(m1, ~ womwage, ellipse=list(levels=0.5))
# AV plot, adjusting and scaling as in marginal plot
avPlots(m1, ~ womwage, marginal.scale=TRUE, ellipse=list(levels=0.5))
?dfbetaPlots	#ANÁLISE DO MODELO	?
avPlots(lm(prestige ~ income + education + type, data=Duncan))
avPlots(lm(prestige ~ income))
avPlots(lm(prestige ~ income, data=Duncan))
avPlots(lm(prestige ~ income, data=Duncan))
plot(Duncan$prestige~Duncan$income)
avPlots(lm(prestige+education ~ income, data=Duncan))
plot(Duncan$prestige~Duncan$income)
avPlots(lm(prestige ~ income + education + type, data=Duncan))
lm(income ~ education + type, data=Duncan)
m1 <- lm(prestige ~ income + education + type, data=Duncan)
m2 <- lm(income ~ education + type, data=Duncan)
m1$fitted.values~m2$fitted.values
plot(m1$fitted.values~m2$fitted.values)
abline(lm(m1$fitted.values~m2$fitted.values))
plot(m1$fitted.values~m2$fitted.values)
abline(lm(m1$fitted.values~m2$fitted.values))
avPlots(lm(prestige ~ income + education + type, data=Duncan))
m1 <- lm(prestige ~ income + education + type, data=Duncan)
m2 <- lm(income ~ education + type, data=Duncan)
plot(m1$fitted.values~m2$fitted.values)
abline(lm(m1$fitted.values~m2$fitted.values))
avPlots(lm(prestige ~ income + education + type, data=Duncan))
avPlots(glm(partic != "not.work" ~ hincome + children,
data=Womenlf, family=binomial), id=FALSE)
m1 <- lm(partic ~ tfr + menwage + womwage + debt + parttime, Bfox)
par(mfrow=c(1,3))
# marginal plot, ignoring other predictors:
with(Bfox, dataEllipse(womwage, partic, levels=0.5))
abline(lm(partic ~ womwage, Bfox), col="red", lwd=2)
# AV plot, adjusting for others:
avPlots(m1, ~ womwage, ellipse=list(levels=0.5))
# AV plot, adjusting and scaling as in marginal plot
avPlots(m1, ~ womwage, marginal.scale=TRUE, ellipse=list(levels=0.5))
?dfbetaPlots	#ANÁLISE DO MODELO	?
dfbetaPlots(lm(prestige ~ income + education + type, data=Duncan))
?dfbetaPlots	#ANÁLISE DO MODELO	?
lm(prestige ~ income + education + type, data=Duncan)
dfbetaPlots(lm(prestige ~ income + education + type, data=Duncan))
dfbetasPlots(glm(partic != "not.work" ~ hincome + children,
data=Womenlf, family=binomial))
dfbetaPlots(lm(prestige ~ income + education + type, data=Duncan))
1/0.1
lm(prestige ~ income + education + type, data=Duncan)
summary(lm(prestige ~ income + education + type, data=Duncan))
dfbetaPlots(lm(prestige ~ income + education + type, data=Duncan))
?leveragePlot	#ANÁLISE DO MODELO	?
leveragePlots(lm(prestige~(income+education)*type, data=Duncan))
dfbetaPlots(lm(prestige ~ income + education + type, data=Duncan))
dfbetasPlots(glm(partic != "not.work" ~ hincome + children,
data=Womenlf, family=binomial))
?inverseResponsePlot	#ANÁLISE DO MODELO	?
m2 <- lm(rate ~ log(len) + log(adt) + slim + shld + log(sigs1), Highway1)
invResPlot(m2)
m2 <- lm(rate ~ log(len) + log(adt) + slim + shld + log(sigs1), Highway1)
invResPlot(m2)
m2 <- lm(rate ~ log(len) + log(adt) + slim + shld + log(sigs1), Highway1)
invResPlot(m2)
?leveragePlot	#ANÁLISE DO MODELO	?
leveragePlots(lm(prestige~(income+education)*type, data=Duncan))
ceresPlots(lm(prestige~(income+education)*type, data=Duncan))
avPlots(lm(prestige~(income+education)*type, data=Duncan))
?subsets	#ANÁLISE DO MODELO	?
if (require(leaps)){
subsets(regsubsets(undercount ~ ., data=Ericksen),
legend=c(3.5, -37))
}
?residualPlot	#ANÁLISE DO MODELO	Análise de resíduos
?boxCoxVariable
mod <- lm(interlocks + 1 ~ assets, data=Ornstein)
mod.aux <- update(mod, . ~ . + boxCoxVariable(interlocks + 1))
summary(mod.aux)
summary(mod.aux)
?avPlot
?inverseResponsePlot
m2 <- lm(rate ~ log(len) + log(adt) + slim + shld + log(sigs1), Highway1)
invResPlot(m2)
Highway1$rate
summary(Highway1$rate)
?leveragePlot
slp(m2)
m1 <- lm(prestige ~ income, data=Prestige)
residualPlots(m1)
residualPlots(m1, terms= ~ 1 | type) # plot vs. yhat grouping by type
par(mfrow = c(1,2))
m1 <- glm(interlocks + 1 ~ assets + sector + nation, data=Ornstein,
family = 'Gamma')
slp(m1)
plot(log(abs(rstudent(m1)))~log(m1$fitted.values))
?ceresPlots(lm(prestige~income+education+type, data=Prestige),
terms= ~ . - type)
?crPlots(m<-lm(prestige ~ income + education, data=Prestige))
c1 <- lm(infantMortality ~ ppgdp, UN)
mmps(c1)
c1 <- lm(infantMortality ~ ppgdp, UN)
mmps(c1)
c2 <- update(c1, ~ log(ppgdp))
mmps(c2)
# include SD lines
p1 <- lm(prestige ~ income + education, Prestige)
mmps(p1, sd=TRUE)
# condition on type:
mmps(p1, ~. | type)
# logisitic regression example
# smoothers return warning messages.
# fit a separate smoother and color for each type of occupation.
m1 <- glm(lfp ~ ., family=binomial, data=Mroz)
mmps(m1)
c1 <- lm(infantMortality ~ ppgdp, UN)
mmps(c1)
influencePlot(lm(prestige ~ income + education, data=Duncan))
par(mfrow = c(1,2))
m1 <- glm(interlocks + 1 ~ assets + sector + nation, data=Ornstein,
family = 'Gamma')
slp(m1)
plot(log(abs(rstudent(m1)))~log(m1$fitted.values))
m1 <- lm(partic ~ tfr + menwage + womwage + debt + parttime, data = Bfox)
mcPlot(m1, "womwage")
mcPlot(m1, "womwage", overlaid=FALSE, ellipse=TRUE)
vif(lm(prestige ~ income + education, data=Duncan))
vif(lm(prestige ~ income + education + type, data=Duncan))
m2 <- lm(rate ~ log(len) + log(adt) + slim + shld + log(sigs1), Highway1)
invResPlot(m2)
leveragePlots(lm(prestige~(income+education)*type, data=Duncan))
if (require(leaps)){
subsets(regsubsets(undercount ~ ., data=Ericksen),
legend=c(3.5, -37))
}
m2 <- lm(rate ~ log(len) + log(adt) + slim + shld + log(sigs1), Highway1)
invResPlot(m2)
c1 <- lm(infantMortality ~ ppgdp, UN)
mmps(c1)
m1 <- lm(partic ~ tfr + menwage + womwage + debt + parttime, data = Bfox)
mcPlot(m1, "womwage")
mcPlot(m1, "womwage", overlaid=FALSE, ellipse=TRUE)
m <- lm(prestige ~ income + education + type, data=Duncan)
qqPlot(m, envelope=.99)
m1 <- lm(prestige ~ income, data=Prestige)
residualPlots(m1)
residualPlots(m1, terms= ~ 1 | type) # plot vs. yhat grouping by type
influencePlot(lm(prestige ~ income + education, data=Duncan))
m1 <- glm(interlocks + 1 ~ assets + sector + nation, data=Ornstein,
family = 'Gamma')
slp(m1)
plot(log(abs(rstudent(m1)))~log(m1$fitted.values))
crPlots(m<-lm(prestige ~ income + education, data=Prestige))
crPlots(m, terms=~ . - education) # get only one plot
ceresPlots(lm(prestige~income+education+type, data=Prestige),
terms= ~ . - type)
avPlots(lm(prestige ~ income + education + type, data=Duncan))
dfbetaPlots(lm(prestige ~ income + education + type, data=Duncan))
dfbetasPlots(glm(partic != "not.work" ~ hincome + children,
data=Womenlf, family=binomial))
vif(lm(prestige ~ income + education, data=Duncan))
vif(lm(prestige ~ income + education + type, data=Duncan))
m2 <- lm(rate ~ log(len) + log(adt) + slim + shld + log(sigs1), Highway1)
invResPlot(m2)
m1 <- lm(partic ~ tfr + menwage + womwage + debt + parttime, data = Bfox)
mcPlot(m1, "womwage")
mcPlot(m1, "womwage", overlaid=FALSE, ellipse=TRUE)
?slp(m1)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE,fig.align='center',
fig.height = 5, fig.width = 6)
crPlots(m<-lm(prestige ~ income + education, data=Prestige))
crPlots(m, terms=~ . - education) # get only one plot
crPlots(lm(prestige ~ log2(income) + education + poly(women,2), data=Prestige))
crPlots(glm(partic != "not.work" ~ hincome + children,
data=Womenlf, family=binomial), smooth=list(span=0.75))
avPlots(lm(prestige ~ income + education + type, data=Duncan))
avPlots(glm(partic != "not.work" ~ hincome + children,
data=Womenlf, family=binomial), id=FALSE)
m1 <- lm(partic ~ tfr + menwage + womwage + debt + parttime, Bfox)
par(mfrow=c(1,3))
# marginal plot, ignoring other predictors:
with(Bfox, dataEllipse(womwage, partic, levels=0.5))
abline(lm(partic ~ womwage, Bfox), col="red", lwd=2)
# AV plot, adjusting for others:
avPlots(m1, ~ womwage, ellipse=list(levels=0.5))
# AV plot, adjusting and scaling as in marginal plot
avPlots(m1, ~ womwage, marginal.scale=TRUE, ellipse=list(levels=0.5))
getwd()
setwd("~/Área de Trabalho/car/exemplos_R")
rmarkdown::render_site()
rmarkdown::render_site()
setwd("~/Área de Trabalho/car")
rmarkdown::render_site()
#------------------------------------------------------------
##Anova Tables for Various Statistical Models
#------------------------------------------------------------
library(car)
m1 <- lm(prestige ~ education + log2(income) + type,
data = na.omit(Prestige))
m2 <- lm(prestige ~ 1,
data = na.omit(Prestige))
anova(m1,m2)
#Type I analysis of variance
anova(m1)
#Type II analysis of variance
Anova(m1, type = 2)
m3 <- lm(prestige ~ education + log2(income) + type +
education:type + log2(income):type,
data = na.omit(Prestige))
Anova(m3, type = 2)
##Heteroscedasticity-Corrected Covariance Matrices
Anova(m3, vcov. = hccm)
hccm(m3)
#Examples
mod.davis <- lm(weight ~ repwt, data=Davis)
mod.davis
linearHypothesis(mod.davis, c("(Intercept) = 0", "repwt = 1"))
## the following are equivalent:
linearHypothesis(mod.davis, diag(2), c(0,1))
linearHypothesis(mod.davis, c("(Intercept) = 0", "repwt = 1"))
linearHypothesis(mod.davis, c("(Intercept)", "repwt"), c(0,1))
linearHypothesis(mod.davis, c("(Intercept)", "repwt = 1"))
## use asymptotic Chi-squared statistic
linearHypothesis(mod.davis, c("(Intercept) = 0", "repwt = 1"),
test = "Chisq")
## the following are equivalent:
## use HC3 standard errors via white.adjust option
linearHypothesis(mod.davis, c("(Intercept) = 0", "repwt = 1"),
white.adjust = TRUE)
mod.duncan <- lm(prestige ~ income + education, data=Duncan)
mod.duncan
linearHypothesis(mod.duncan, "income - education")
mod.duncan.2 <- lm(prestige ~ type*(income + education), data=Duncan)
coefs <- names(coef(mod.duncan.2))
## test against the null model (i.e., only the intercept is not set to 0)
linearHypothesis(mod.duncan.2, coefs[-1])
## test against the null model (i.e., only the intercept is not set to 0)
linearHypothesis(mod.duncan.2, coefs[-1])
## test all interaction coefficients equal to 0
linearHypothesis(mod.duncan.2, coefs[grep(":", coefs)], verbose=TRUE)
## test all interaction coefficients equal to 0
linearHypothesis(mod.duncan.2, coefs[grep(":", coefs)], verbose=TRUE)
library(car)
funcoes <- read.csv2("class_func.csv", header = T, sep = ',')
tabela <-funcoes[, c(2,5,6)]
names(tabela) <- c('Função', 'Categoria', 'Utilidade')
tabela
tabela
tabela$Categoria
DT::datatable(subset(tabela, Categoria == "ANÁLISE DO MODELO"),
filter = 'top',
options = list(
bPaginate = FALSE))
render_site()
render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
library(car)
funcoes <- read.csv2("class_func.csv", header = T, sep = ',')
tabela <-funcoes[, c(2,5,6)]
names(tabela) <- c('Função', 'Categoria', 'Utilidade')
## Desativadas, descontinuadas, sem utilidade prática
```{r, echo=FALSE}
DT::datatable(subset(tabela, Categoria == "DESATIVADA/DESCONTINUADA/IRRELEVANTE"),
filter = 'top',
options = list(
bPaginate = FALSE))
DT::datatable(subset(tabela, Categoria == "DESATIVADA/DESCONTINUADA/IRRELEVANTE"),
filter = 'top',
options = list(
bPaginate = FALSE))
---
## Tratamento e análise de exploratória de dados
```{r, echo=FALSE}
DT::datatable(subset(tabela, Categoria == "EXPLORATÓRIA/TRATAMENTO"),
filter = 'top',
options = list(
bPaginate = FALSE))
---
## Transformação de variável
```{r, echo=FALSE}
DT::datatable(subset(tabela, Categoria == "TRANSFORMAÇÃO"),
filter = 'top',
options = list(
bPaginate = FALSE))
rmarkdown::render_site()
rmarkdown::render_site()
render_site()
knitr::opts_chunk$set(echo = TRUE, cache = TRUE,fig.align='center')
Tapply(Sepal.Length ~ Species, mean, data=iris)
Tapply(Sepal.Length ~ Species, sd, data=iris)
render_site()
some(iris, n = 5)
some(iris, n = 5)
?some(iris, n = 5)
car::some(iris, n = 5)
some(iris, n = 5)
some(iris, n = 5)
car::some(iris, n = 5)
render_site()
render_site()
render_site()
m2 <- lm(rate ~ log(len) + log(adt) + slim + shld + log(sigs1), Highway1)
invResPlot(m2)
m2 <- lm(rate ~ log(len) + log(adt) + slim + shld + log(sigs1), Highway1)
?invResPlot(m2)
m2 <- lm(rate ~ log(len) + log(adt) + slim + shld + log(sigs1), Highway1)
invResPlot(m2)
plot(m2$fitted.values~Highway1$rate)
plot(m2$fitted.values~Highway1$rate)
plot(m2$fitted.values^0.1350783~Highway1$rate)
##  {.tabset .tabset-fade}
influencePlot(lm(prestige ~ income + education, data=Duncan))
model.matrix(m2)
X<-model.matrix(m2)
X %*% ((t(X) %*% X)^-1) %*% t(X)
h <- X %*% ((t(X) %*% X)^-1) %*% t(X)
h
invResPlot(m2)
influencePlot(lm(prestige ~ income + education, data=Duncan))
m2 <- influencePlot(lm(prestige ~ income + education, data=Duncan))
invResPlot(m2)
m2
m2 <- lm(prestige ~ income + education, data=Duncan)
invResPlot(m2)
plot(m2$fitted.values~Duncan$prestige)
X<-model.matrix(m2)
h <- X %*% ((t(X) %*% X)^-1) %*% t(X)
h
influencePlot(lm(prestige ~ income + education, data=Duncan))
rstudent(m2)
plot(rstudent(m2))
plot(rstudent(m2)~h)
h <- X %*% ((t(X) %*% X)^-1) %*% t(X)
length(rstudent(m2))
length(h)
X<-model.matrix(m2)
X
leveragePlots(lm(prestige~(income+education)*type, data=Duncan))
render_site()
render_site()
m1 <- lm(prestige ~ ., data=Prestige)
m1
residualPlots(m1)
render_site()
#------------------------------------------------------------
##Anova Tables for Various Statistical Models
#------------------------------------------------------------
library(car)
m1 <- lm(prestige ~ education + log2(income) + type,
data = na.omit(Prestige))
m2 <- lm(prestige ~ 1,
data = na.omit(Prestige))
anova(m1,m2)
#Type I analysis of variance
anova(m1)
#Type II analysis of variance
Anova(m1, type = 2)
m3 <- lm(prestige ~ education + log2(income) + type +
education:type + log2(income):type,
data = na.omit(Prestige))
Anova(m3, type = 2)
hccm(m3)
##Heteroscedasticity-Corrected Covariance Matrices
Anova(m3, vcov. = hccm)
#Examples
mod.davis <- lm(weight ~ repwt, data=Davis)
mod.davis
## the following are equivalent:
linearHypothesis(mod.davis, diag(2), c(0,1))
linearHypothesis(mod.davis, c("(Intercept) = 0", "repwt = 1"))
## use asymptotic Chi-squared statistic
linearHypothesis(mod.davis, c("(Intercept) = 0", "repwt = 1"),
test = "Chisq")
mod.duncan <- lm(prestige ~ income + education, data=Duncan)
## the following are all equivalent:
linearHypothesis(mod.duncan, "1*income - 1*education = 0")
mod.duncan.2 <- lm(prestige ~ type*(income + education), data=Duncan)
coefs <- names(coef(mod.duncan.2))
## test against the null model (i.e., only the intercept is not set to 0)
linearHypothesis(mod.duncan.2, coefs[-1])
## test all interaction coefficients equal to 0
linearHypothesis(mod.duncan.2, coefs[grep(":", coefs)], verbose=TRUE)
mod.duncan.2
## test all interaction coefficients equal to 0
linearHypothesis(mod.duncan.2, coefs[grep(":", coefs)], verbose=TRUE)
## test all interaction coefficients equal to 0
linearHypothesis(mod.duncan.2, coefs[grep(":", coefs)], verbose=TRUE)
render_site()
